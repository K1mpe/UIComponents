@using CDCPortal.SBL.Models.ToastModels.QuestionNotifications;

@model YesNoQuestion
@{
    string variableName = $"Swal{Model.Id.Replace("-","")}";
}

@if (Model.RemoveNotification)
{
    <script>
        $(document).ready(function(){
            swal.close();
        });
    </script>
}
else
{
    <script>
        $(document).ready(function () {
            console.log('YesNo Sweet');
            const @(variableName) = Swal.mixin({
                customClass: {
                    confirmButton: 'btn btn-@(Model.ButtonYes.Color?.ToLower()?? Color.Default.ToLower())',
                    cancelButton: 'btn btn-@(Model.ButtonNo.Color?.ToLower() ?? Color.Default.ToLower())'
                },
                buttonsStyling: false
            })

        @(variableName).fire({
                title: '@Html.JsEncode(L.GetResourceValue(Model.Title))',
                text: '@Html.JsEncode(L.GetResourceValue(Model.Message))',
        @*icon: 'warning',*@
                showCancelButton: true,
                confirmButtonText: '@L.GetResourceValue(Model.ButtonYes.ButtonText)',
                cancelButtonText: '@L.GetResourceValue(Model.ButtonNo.ButtonText)',
                reverseButtons: @Json.Serialize(Model.InvertButtons),
                allowOutsideClick: @Json.Serialize(Model.DisableCloseOnClickOut),
                allowEscapeKey: @Json.Serialize(Model.DisableCloseOnClickOut),
                }).then(async (result) => {
                    if (result.isConfirmed) {
        @await Model.ButtonYes.OnClick.InvokeAsync(Component)
                  } else {
        @await Model.ButtonNo.OnClick.InvokeAsync(Component)
                  }
                });
            })
    </script>
}


