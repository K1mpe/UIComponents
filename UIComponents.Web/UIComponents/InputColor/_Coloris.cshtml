@using CDCPortal.Web.Validators;

@inject ValidationMessages messages;
@model UICInputColor
@{
    Model.AddAttribute("class", "coloris");
    Model.AddAttribute("class", "form-control");
    string id = Model.GetOrGenerateId();

    Model.AssignCollectionForChildren();
    if (Model.Actions.HasValue())
    {
        Model.Actions.SetIdentifier($"#{id}");
    }

    if (Model.OnlySystemColors)
    {
        Model.AddAttribute("class", "only-swatches");
    }
    else if (Model.AllowAlpha)
    {
        Model.AddAttribute("class", "allow-alpha");
    }




}


<div class="coloris-square">
    <input type="text" value="@Model.Value" @Html.Raw(Model.GetHtmlAttributes()) />
</div>



@if (Model.HasClientSideValidation)
{

    string propertyName = Model.PropertyName;
    if (Model.DisplayName != null)
        propertyName = L.GetResourceValue(Model.DisplayName);

    Model.AddScript(
@<text>
    var isColor = (strColor) => {
    const s = new Option().style;
    s.color = strColor;
    return s.color !== '';
    }
    function validateInput(element) {
    var currentValue = element.val();
    var span = element.parent().parent().parent().find('span.field-validation-valid[data-valmsg-for="@Model.PropertyName"]');
    span.text("");

    @if (Model.ValidationValidColor)
                {

    <text>
        if (!CSS.supports('color', currentValue)) {
        span.text(@Json.Serialize(L.GetResourceValue("Validation.Color.Invalid", "This is a invalid color")));
        }


    </text>
                }

    @if (Model.ValidationRequired)
                {
    <text>
        if (currentValue.length == 0)
        span.text('@messages.Required(propertyName)');
    </text>
                }


    }

    $('#@id').keyup(function () {
    validateInput($(this));
    });
    $('#@id').blur(function () {
    validateInput($(this));
    });

    </text>);

}

@await Model.Actions.InvokeAsync(Component)

@await Model.RenderStylesAndScripts(Component)