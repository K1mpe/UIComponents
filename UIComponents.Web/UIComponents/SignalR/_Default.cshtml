@using CDCPortal.DA.UIComponents.Abstract;
@using CDCPortal.DA.UIComponents.Extentions;
@using CDCPortal.DA.UIComponents.Models;

@model UICSignalR
@{
    string id = Model.GetOrGenerateId();
    foreach(var child in Model.GetAllChildren())
    {
        if (child is UIComponent component)
        {
            component.AddAttribute("identifier", $"#{id}");
        }
    }
}


<div @Html.Raw(Model.GetHtmlAttributes())>
    <script>
        $(document).ready(async function () {
        //console.log('uic-signalR');
        @if (!string.IsNullOrWhiteSpace(Model.JoinGroups))
        {
            <text>
                if (connection.state == signalR.HubConnectionState.Connected) {
                    await connection.invoke("JoinGroup", '@Model.JoinGroups');
                }
                EventManager.subscribe('connected', async () => {
                    await connection.invoke("JoinGroup", '@Model.JoinGroups');

                });
            </text>
        }
        @if (string.IsNullOrWhiteSpace(Model.SubscriptionName))
        {
            <text>
                    console.log('SignalR does not have a subscription!');
            </text>
        }
        else
        {
            <text>
                await connection.on('@Model.SubscriptionName', async function (@string.Join(", ", Model.IncommingArgs)){
                    @if (Model.DisableOnHidden)
                    {
                        <text>
                            if (!$('#@id').length){
                                return;
                            }
                        </text>
                    }

                    @await Model.Action.InvokeAsync(Component)

                });
            </text>
        }


        });
    </script>
</div>
