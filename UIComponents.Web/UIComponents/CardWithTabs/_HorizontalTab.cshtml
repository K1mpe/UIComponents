@using CDCPortal.DA.UIComponents.Abstract;
@using CDCPortal.DA.UIComponents.Models;
@model UICCardWithTabs

@{
    if (Model.RememberTabState)
        Model.RememberTabState = Model.Attributes.ContainsKey("id");

    string id = Model.GetOrGenerateId();
    Model.AddAttribute("class", "card card-tabs");
    Model.AddBodyAttribute("class", "card-body");

    Model.AssignCollectionForChildren();

    Model.AddScript(
    @<text>

    @if (Model.RememberTabState)
    {
        <text>
        let openTabId= localStorage.getItem('tabs-lastState-@id');
        if(openTabId != null)
            taghelper.card.openTab($(openTabId));
        

            taghelper.card.openFirstTabCard($('#@id'), true);


        $('#@id').on('tabChanged', (ev, tabs)=>{
            console.log(`Saving tab ${$(tabs.newTab).attr('href')}`);
            localStorage.setItem('tabs-lastState-@id', $(tabs.newTab).attr('href'));
        })
        </text>
    }

        
    </text>);
}

@if(Model.Tabs.Count == 1 && Model.OnlyRenderSingleContent)
{
    @await Model.Tabs.First().InvokeAsync(Component)
}
else
{
    <div @Html.Raw(Model.GetHtmlAttributes())>
        <div class="card-header">
            <div class="card-header-tabs nav nav-justified nav-tabs" role="tablist" aria-orientation="horizontal">
                @for (int i = 0; i < Model.Tabs.Count; i++)
                {
                    var tab = Model.Tabs[i];
                    var title = tab.Title;
                    tab.Title = null;

                    if (tab is UICCard card)
                    {
                        card.OnlyDisplayContent = true;
                        card.DefaultClosed = true;
                        card.AddAttribute("class", "tab-card");
                    }
                    if (tab is Card card2)
                    {
                        card2.HideHeader = true;
                        card2.RemoveCardClass = true;
                        card2.DefaultClosed = true;
                        card2.AddCardAttribute("class", "tab-card");
                    }
                    if (tab is UICCardWithTabs subTabs)
                    {
                        subTabs.AddBodyAttribute("class", "p-0 pt-2");
                    }
                    <a class="nav-link" data-toggle="tab" role="tab" href="@($"#{id}-tab{i+1}")">
                        @L.GetResourceValue(title)
                    </a>
                }
            </div>

        </div>
        <div @Html.Raw(Model.BodyAttributes.GetHtmlAttributes())>
            <div class="tab-content">
                @for (int i = 0; i < Model.Tabs.Count; i++)
                {
                    var tab = Model.Tabs[i];
                    <div class="tab-pane fade" role="tabpanel" id="@($"{id}-tab{i+1}")">
                        @await tab.InvokeAsync(Component)
                    </div>
                }
            </div>
        </div>
    </div>
}

@await Model.RenderStylesAndScripts(Component)
