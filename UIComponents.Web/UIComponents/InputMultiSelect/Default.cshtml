@using UIComponents.Abstractions.Attributes;
@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Interfaces.ExternalServices;
@using UIComponents.Abstractions.Models;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Defaults;
@using UIComponents.Models;
@using UIComponents.Models.Models;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;
@using UIComponents.Models.Models.Card;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Texts;
@using UIComponents.Web.Extensions;

@model UICInputMultiSelect

@{
    Model.AssignCollectionForChildren();
    Model.AddAttribute("class", "form-control");
    string id = Model.GetOrGenerateId();

    string placeholder = Model.GetAttribute("placeholder");

    var style = Model.GetAttribute("style");
    Model.Attributes["style"] = "";
    if (Model.Color != null)
    {
     
    //    Model.AddStyle(
    //@<text>
    //            #@id + span .select2-selection__choice{
    //            background-color: @Model.Color.ToHex() !important;
    //            border-color: @Model.Color.ToHex() !important;
    //            }
    //            #@id + span.select2-container--focus .select2-selection--multiple {
    //            border-color: @Model.Color.ToHex() !important;
    //            }
    //            .select2-container--open[data-for=@id] .select2-results__option--highlighted{
    //            background-color: @Model.Color.ToHex() !important;
    //            }
    //        </text>
    //    );
    }
}

<select @Html.Raw(Model.GetHtmlAttributes())>
    @foreach(var item in Model.SelectListItems)
    {
        <option value="@item.Value">@item.Text</option>
    }
</select>

@{
    Model.AddScript(@<text>
            $('#@id').select2({
                multiple: true,
                closeOnSelect: @Json.Serialize(Model.CloseOnSelect),
                @if (!string.IsNullOrEmpty(placeholder))
                    {
                    <text>
                    placeholder: @Html.JsEncode(placeholder, "'"),
                    </text>
                    }
            });

            $('#@id').data('select2').$dropdown.attr('data-for', '@id').addClass('include-items');
            $('#@id').on('setValue', function(event, ...values){
               
                $('#@id').val(values).change();
            });

            $('#@id').val(@Json.Serialize(Model.Value)).change();

            $('#@id').next().attr('style', @Html.JsEncode(style, "'"));
        </text>
    );
}

@*Als script doorgeschoven wordt naar parent, doet deze functie niets*@
@await Model.RenderStylesAndScripts(Component)