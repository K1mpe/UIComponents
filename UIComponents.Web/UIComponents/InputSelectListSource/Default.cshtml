@using UIComponents.Abstractions.Attributes;
@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Interfaces.ExternalServices;
@using UIComponents.Abstractions.Models;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Defaults;
@using UIComponents.Models;
@using UIComponents.Models.Models;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Texts;
@using UIComponents.Web.Extensions;

@inject IUicLanguageService L

@model UICInputSelectListSource

@{
    var id= Model.InputSelectList.GetId();

    Model.AssignCollectionForChildren();

    if(Model.GetSelectListItems != null)
    {
        Model.AddScript(
    @<text>

        $('#@id').on('uic-help', function(){
            console.log("$('#@id').trigger('uic-reload')    Reload all selectlistitems");
            console.log("$('#@id').on('uic-before-load', ()=>{...})  Triggered before the selectlist starts loading");
            console.log("$('#@id').on('uic-loaded', ()=>{...})  Triggered after the selectlistitems are finished loading");
        });

       


        $('#@id').on('uic-reload', async function(){
            let element = $('#@id');
            element.triggerHandler('uic-before-load');
            @await Model.GetSelectListItems.InvokeAsync(Component);

            let selectListItems = @Html.Raw(Model.GetSelectListItems.ResultName);

            
            let currentValue = uic.getValue(element) || @Html.JsEncode(Model.InputSelectList.Value, "'");
            @if(Model.MapToSelectListItems != null)
            {
                <text>
                    selectListItems = await Model.MapToSelectListItems.InvokeAsync(Component);
                </text>
            }

            @switch (Model.Sorting)
            {
                case UICInputSelectListSource.ItemSorting.NoSorting:
                    break;
                case UICInputSelectListSource.ItemSorting.Text_Ascending:
                    <text>
                        selectListItems = selectListItems.sort((a, b) =>{
                            let textA = a.Text.toUpperCase() || '';
                            let textB = b.Text.toUpperCase() || '';
                            if(textA > textB)
                            return 1;
                            else if(textB > textA)
                            return -1;
                        return 0;
                        });
                    </text>
                    break;
                case UICInputSelectListSource.ItemSorting.Text_Decending:
                    <text>
                        selectListItems = selectListItems.sort((a, b) =>{
                        let textA = a.Text.toUpperCase() || '';
                        let textB = b.Text.toUpperCase() || '';
                        if(textA > textB)
                            return -1;
                        else if(textB > textA)
                            return 1;
                        return 0;
                        });
                    </text>
                    break;
                case UICInputSelectListSource.ItemSorting.Value_Ascending:
                    <text>
                        selectListItems = selectListItems.sort((a, b) =>{
                        let valueA = a.Value.toUpperCase() || '';
                        let valueB = b.Value.toUpperCase() || '';
                        if(valueA > valueB)
                            return 1;
                        else if(valueB > valueA)
                            return -1;
                        return 0;
                        });
                    </text>
                    break;
                case UICInputSelectListSource.ItemSorting.Value_Decending:
                    <text>
                        selectListItems = selectListItems.sort((a, b) =>{
                        let valueA = a.Value.toUpperCase() || '';
                        let valueB = b.Value.toUpperCase() || '';
                        if(valueA > valueB)
                            return -1;
                        else if(valueB > valueA)
                            return 1;
                        return 0;
                        });
                    </text>
                    break;
                default:
                    throw new NotImplementedException();
            }
        
            element.find('option').remove();

            if(selectListItems.length == 0){
                element.append($('<option>', {text: @await Html.Translate(L, Model.InputSelectList.NoItemsText)}));
            } else{
                selectListItems.forEach((item)=>{
                    element.append($('<option>', { value: item.Value, text: item.Text}));
                });
            }

            uic.setValue(element, currentValue);

            element.triggerHandler('uic-loaded');
        });
        @if (Model.ReloadOnOpen)
        {
        <text>
        $('#@id').on('uic-open', ()=>{
            $('#@id').trigger('uic-reload');
        })
        </text>
        }
        @if (!Model.SkipInitialLoad)
        {
            <text>
            $('#@id').trigger('uic-reload');
            </text>
        }

    </text>);
    }
}

@await Model.InputSelectList.InvokeAsync(Component)




@await Model.RenderStylesAndScripts(Component)

