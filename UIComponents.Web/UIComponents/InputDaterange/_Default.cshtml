@model UICInputDateRange
@{
    Model.AddAttribute("class", "form-control");
    Model.AddAttribute("class", "input-daterange");
    Model.AddAttribute("type", "text");
    string id = Model.GetOrGenerateId();
    Model.AssignCollectionForChildren();
}

<input @Html.Raw(Model.GetHtmlAttributes())/>

@{
    Model.AddScript(@<text>
        //https://www.daterangepicker.com/
        $('#@id').daterangepicker({
        linkedCalendars: @JsonSerializer.Serialize(!Model.DisconnectCalendars),
        timePicker: @JsonSerializer.Serialize(Model.Precision != CDCPortal.DA.UIComponents.Enums.UICDatetimeStep.Date),
        timePickerSeconds: @JsonSerializer.Serialize(Model.Precision == CDCPortal.DA.UIComponents.Enums.UICDatetimeStep.Second),
        alwaysShowCalendars: @JsonSerializer.Serialize(Model.AlwaysShowCalendar),
        showCustomRangeLabel: @JsonSerializer.Serialize(!Model.AlwaysShowCalendar || true),
        showISOWeekNumbers: @JsonSerializer.Serialize(Model.ShowWeeknumbers),

        @if (Model.Value?.Start.HasValue ?? false)
    {
        <text>
            startDate: @Model.Value.Start.Value.ToMoment(Html),
        </text>
    }
        @if (Model.Value?.End.HasValue ?? false)
    {
        <text>
            endDate: @Model.Value.End.Value.ToMoment(Html),
        </text>
    }


        locale: {
        @if (!string.IsNullOrEmpty(Model.DisplayFormat))
    {
        <text>
            format: @JsonSerializer.Serialize(Model.DisplayFormat),
        </text>
    }
    //Apply format for minute precision
    else if(Model.Precision == CDCPortal.DA.UIComponents.Enums.UICDatetimeStep.Minute)
    {
        <text>
            format: "L LT",
        </text>
    }

    //Apply format for second precision
    else if (Model.Precision == CDCPortal.DA.UIComponents.Enums.UICDatetimeStep.Second)
    {
        <text>
            format: "L LTS",
        </text>
    }
        },


        @if (Model.ValidationMinimumDate.HasValue)
    {
        <text>
            minDate: @Model.ValidationMinimumDate.Value.ToMoment(Html),
        </text>
    }
        @if(Model.ValidationMaximumDate.HasValue)
    {
        <text>
            maxDate: @Model.ValidationMaximumDate.Value.ToMoment(Html),
        </text>
    }
        @if (Model.ValidationMaxLength.HasValue)
    {
        <text>
            maxSpan:{
            miliseconds: @Model.ValidationMaxLength.Value.TotalMilliseconds
            },
        </text>
    }
        @foreach(var option in Model.Options)
    {
        <text>
            @option.Key: @JsonSerializer.Serialize(option.Value),
        </text>
    }
        });

        $('#@id').on('GetValue', function () {
            var data = $(this).data('daterangepicker');
            return {
                Start: data.startDate.format(),
                End: data.endDate.format()
            }
        });

        $('#@id').on('SetValue', function(event, value){
            console.log('set daterange', value);
        if(value.Start !== undefined){
            if(value.Start == null)
                value.Start = @(Model.ValidationMinimumDate?.ToMoment(Html) ?? new DateTime(2020, 1, 1).ToMoment(Html));
            else
                value.Start = moment(value.Start);

            $('#@id').data('daterangepicker').setStartDate(value.Start);
        }
        if(value.End !== undefined){
            if(value.End == null)
                value.End = @(Model.ValidationMaximumDate?.ToMoment(Html) ?? DateTime.Now.ToMoment(Html));
            else
                value.End = moment(value.End);
            
            $('#@id').data('daterangepicker').setEndDate(value.End);
        }
        $('#@id').trigger('change');
        })

        @if (Model.ForceFitInput)
    {
        <text>
            function forceFit(){
            var length = $('#@id').val().length;
            $('#@id').css('min-width', `${length}ch`);
            //ch => Character width
            }
            forceFit();
        </text>
    }

     
    </text>);
}

@await Model.RenderStylesAndScripts(Component)