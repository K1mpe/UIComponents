@using UIComponents.Abstractions.Attributes;
@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Interfaces.ExternalServices;
@using UIComponents.Abstractions.Models;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Defaults;
@using UIComponents.Models;
@using UIComponents.Models.Models;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Texts;
@using UIComponents.Web.Extensions;

@model UICPartial

@{
    string id = Model.GetOrGenerateId();

    if(Model.GetHtml != null)
    {
        Model.AddAttribute("class", "partial-source");

        if (Model.GetHtml.ClientSideOptions == null)
            Model.GetHtml.ClientSideOptions = new UICCustom(
                @<text>
                {
                    handlers: uic.partial.handlers,
                    cancelPreviousRequests: true
                }
                </text>);

        Model.AddScript(
    @<text>
        $('#@id').on('uic-help', ()=>{
            console.log("$('#@id').triggerHandler('uic-reload') => reload the content of this card");
            console.log("$('#@id').triggerHandler('uic-source') => returns the controller and action of this request")
            console.log("$('#@id').on('uic-before-reload', () => {...}) => triggered before the reload starts");
            console.log("$('#@id').on('uic-reloaded', () => {...}) => triggered after the reload has finished");
            
        });
        $('#@id').on('uic-reload', async(ev) =>{
            ev.stopPropagation();
            @if (!Model.ReloadIfHidden)
            {
            <text>
                if(uic.isHidden($(this)))
                    return;
            </text>
            }

            uic.partial._reloadPartial($('#@id'), @Json.Serialize(Model.ShowOverlay), async() =>{
                
                @await Model.GetHtml.InvokeAsync(Component);
                return @Html.Raw(Model.GetHtml.ResultName);
            });
        });
        $('#@id').on('uic-source', ()=>{
            return '@Json.Serialize($"/{Model.GetHtml.Controller}/{Model.GetHtml.Action}")';
        });
        
        @if(Model.BeforeFetch != null)
        {
        <text>
            $('#@id').on('uic-reload', async () =>{
                @await Model.BeforeFetch.InvokeAsync(Component);
            })
        </text> 
        }

        @if (Model.AfterFetch != null)
        {
        <text>
            $('#@id').on('uic-reloaded', async () =>{
            @await Model.AfterFetch.InvokeAsync(Component);
            })
        </text>
        }
        @if (Model.ReloadIfParentOpens)
        {
        <text>
            $('#@id').parents('.card').on('uic-open', ()=> $(this).trigger('uic-reload'));
        </text>
        }

        @if(!Model.SkipInitialLoad)
        {
        <text>
        $('#@id').triggerHandler('uic-reload');
        </text>
        }
                </text>);

    }
}

<div @Html.Raw(Model.GetHtmlAttributes())>
    @foreach(var child in Model.Children)
    {
        @await child.InvokeAsync(Component)
    }
</div>