@using UIComponents.Abstractions;
@using UIComponents.Abstractions.Attributes;
@using UIComponents.Abstractions.Enums
@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Interfaces.Services;
@using UIComponents.Abstractions.Models;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Defaults;
@using UIComponents.Models;
@using UIComponents.Models.Models;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;
@using UIComponents.Models.Models.Card;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Texts;
@using UIComponents.Models.Models.Questions;
@using UIComponents.Web.Extensions;


@inject IUICLanguageService L
@model UICQuestionSelectList

@{
    string guid = "Question" + Guid.NewGuid().ToString("n");
    bool canCancel = Model.CanCancel;
    string selection = await L.Translate(new("QuestionSelectList.SelectInput"));

    var modal = new UICModal().AddClass("question-modal question-selectlist");
    modal.DisableCloseOnClickout = true;
    modal.DisableEscapeKeyToClickout = !Model.CanCancel;
    var selectlist = new List<UICSelectListItem>();
    foreach(var item in Model.SelectListItems)
    {
        selectlist.Add(new(await L.Translate(item.Text), item.Value));   
    }

    var input = new UICInputSelectList("input", selectlist);
    input.Placeholder = Model.EmptyText;

    var btnToolbar = new UICButtonToolbar().AddClass("question-toolbar");
    btnToolbar.Distance = ButtonDistance.Long;
    if(Model.ButtonSubmit.OnClick is UICActionServerResponse serverResponse)
    {
        serverResponse.GetVariableData = new UICCustom($"{{value: uic.getValue('#{input.GetId()}')}}");
    }

    if(Model.InvertButtons)
    {
        btnToolbar.AddCenter(Model.ButtonCancel);
        btnToolbar.AddCenter(Model.ButtonSubmit);
    }
    else
    {
        btnToolbar.AddCenter(Model.ButtonSubmit);
        btnToolbar.AddCenter(Model.ButtonCancel);
    }
    modal.Add(new UICCustom($"<div id={Model.Id}></div>"));
    modal.Add(new UICCustom(@<text>
        <div class="question-title">
            @await Html.TranslateHtml(L, Model.Title)
        </div>
        <div class="question-message">
            @await Html.TranslateHtml(L, Model.Message)
        </div>
        <div class="question-input">
            @await input.InvokeAsync(Component)
        </div>
            @await btnToolbar.InvokeAsync(Component)

        <script>
        $(document).ready(()=>{
            $(`#@Model.Id`).on('uic-remove', (ev)=>{
                ev.stopPropagation();
                ev.preventDefault();
                $('#@modal.GetId()').trigger('uic-destroy');
            });
            // $('#@Model.ButtonSubmit.GetId(), #@Model.ButtonCancel.GetId()').on('click', ()=>{
            //     setTimeout(()=>{
            //         $('#@modal.GetId()').trigger('uic-destroy');
            //     },200);
            // });
            $('#@modal.GetId()').on('uic-beforeClose', ()=>{
                $('#@Model.ButtonCancel.GetId()').trigger('click');
            });
        })</script>
        </text>
    ));
}

@await modal.InvokeAsync(Component)

