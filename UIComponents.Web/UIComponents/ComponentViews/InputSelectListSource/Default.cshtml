@using UIComponents.Abstractions.Attributes;
@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Interfaces.Services;
@using UIComponents.Abstractions.Models;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Defaults;
@using UIComponents.Models;
@using UIComponents.Models.Models;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Texts;
@using UIComponents.Web.Extensions;

@inject IUICLanguageService L

@model UICInputSelectListSource

@{

    var id= Model.InputSelectList.GetId();

    if(Model.GetSelectListItems != null)
    {
    <text>

        $('#@id').on('uic-help', function(){
            console.log("$('#@id').trigger('uic-reload')    Reload all selectlistitems");
            console.log("$('#@id').on('uic-before-load', ()=>{...})  Triggered before the selectlist starts loading");
            console.log("$('#@id').on('uic-loaded', ()=>{...})  Triggered after the selectlistitems are finished loading");
        });


        $('#@id').on('uic-reload', async function(ev){
            ev.stopPropagation();
            let element = $('#@id');
            element.triggerHandler('uic-before-load');
            @await Model.GetSelectListItems.InvokeAsync(Component);

            let selectListItems = @Html.Raw(Model.GetSelectListItems.ResultName);            
            let currentValue = uic.getValue(element) || @Html.JsEncode(Model.InputSelectList.Value?.ToString()??string.Empty, "'");
            @if(Model.MapToSelectListItems != null)
            {
                <text>
                    selectListItems = await Model.MapToSelectListItems.InvokeAsync(Component);
                </text>
            }
            
            element.children().remove();
            element.append(uic.form.selectlistItems.convertJsonToSelectOptions(selectListItems, @((int)Model.Sorting), @await Html.TranslateJs(L, Model.InputSelectList.NoItemsText)));

            uic.setValue(element, currentValue);

            element.triggerHandler('uic-loaded');
        });
        @if (Model.ReloadOnOpen)
        {
        <text>
        $('#@id').on('uic-open', ()=>{
            $('#@id').trigger('uic-reload');
        })
        </text>
        }
        @if (!Model.SkipInitialLoad)
        {
            <text>
            $('#@id').trigger('uic-reload');
            </text>
        }

    </text>
    }
}