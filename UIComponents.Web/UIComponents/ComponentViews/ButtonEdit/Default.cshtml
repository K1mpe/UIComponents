@using UIComponents.Abstractions;
@using UIComponents.Abstractions.Attributes;
@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Interfaces.Services;
@using UIComponents.Abstractions.Models;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Models;

@using UIComponents.Models.Models;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Texts;
@using UIComponents.Web.Extensions;

@model UICButtonEdit

@{
    Model.ButtonSetReadonly.AddAttribute("type", "cancel");
    Model.ButtonSetReadonly.AddAttribute("class", "btn-readonly");
    Model.ButtonSetEdit.AddAttribute("class", "btn-edit");

    string formId = Model.GetAttribute("formidentifier");
    if (Model.Form != null)
        formId = Model.Form.GetId();

    Model.AssignCollectionForChildren();

    Model.AddScript(
    @<text>
        @if (Model.ReadonlyOnLoad)
        {
            @await Model.ButtonSetReadonly.OnClick.InvokeAsync(Component)
        }
        else
        {
            @await Model.ButtonSetEdit.OnClick.InvokeAsync(Component)
        }
    </text>);
}

@await Model.ButtonSetEdit.InvokeAsync(Component)
@await Model.ButtonSetReadonly.InvokeAsync(Component)

@await Model.RenderStylesAndScripts(Component)