@using UIComponents.Abstractions;
@using UIComponents.Abstractions.Attributes;
@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Interfaces.Services;
@using UIComponents.Abstractions.Models;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Models;
@using UIComponents.Models.Models;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Texts;
@using UIComponents.Web.Extensions;
@model UICActionGetPost
@if (Model.GetVariableData.HasValue())
{
    <text>
        let variableContent = @await Model.GetVariableData.InvokeAsync(Component);
        if(typeof variableContent == 'function')
            variableContent = await variableContent();
    </text>
}
else
{
    <text>
        let variableContent = null;
    </text>
    
}
let data = $.extend(true, {},@Json.Serialize(Model.DefaultData), variableContent, @Json.Serialize(Model.FixedData));
let postOptions = {};
@if(Model.ClientSideOptions != null)
{
    <text>
        postOptions = @await Model.ClientSideOptions.InvokeAsync(Component);
    </text>
}
@if(Model.Options != null)
{
    <text>
        postOptions.cancelPreviousRequests = @Json.Serialize(Model.Options.CancelPreviousRequests);
        postOptions.handlers = [];
        @foreach(var handler in Model.Options.Handlers)
        {
            <text>
                postOptions.handlers.push(@await handler.InvokeAsync(Component))
            </text>
        }
    </text>
}
let @Html.JsEncode(Model.ResultName) = null;
try{
@switch (Model.ActionType)
{
    case UICActionGetPost.ActionTypeEnum.Get:
        <text>
            @Html.JsEncode(Model.ResultName) = await uic.getpost.get('@(string.IsNullOrEmpty(Model.Url) ? Url.Action(Model.Action, Model.Controller) : Html.Raw(Model.Url))', data, postOptions);
        </text>
        break;
    case UICActionGetPost.ActionTypeEnum.Post:
        <text>
            @Html.JsEncode(Model.ResultName) = await uic.getpost.post('@(string.IsNullOrEmpty(Model.Url) ? Url.Action(Model.Action, Model.Controller) : Html.Raw(Model.Url))', data, postOptions);
        </text>
        break;
    default:
        throw new NotImplementedException();
}
    if(@Html.JsEncode(Model.ResultName) != false){
        @await Model.OnSuccess.InvokeAsync(Component);
    }

} catch(ex){
    @await Model.OnFailed.InvokeAsync(Component);
}

       