@using UIComponents.Abstractions;
@using UIComponents.Abstractions.Attributes;
@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Interfaces.Services;
@using UIComponents.Abstractions.Models;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Defaults;
@using UIComponents.Models;
@using UIComponents.Models.Models;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;
@using UIComponents.Models.Models.Card;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Texts;
@using UIComponents.Web.Extensions;

@model UICButtonGroup

@{
    if (Model.VerticalButtons)
        Model.AddAttribute("class", "btn-group-vertical");
    else
        Model.AddAttribute("class", "btn-group");

    Model.AddAttribute("role", "group");
}

<div @Html.Raw(Model.GetHtmlAttributes())>
    @foreach(var button in Model.Buttons)
    {
        if (button is UICDropdown dropdown)
            dropdown.AddAttribute("class", "btn-group");
        @await button.InvokeAsync(Component)
    }
</div>

