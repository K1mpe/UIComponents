@using UIComponents.Abstractions;
@using UIComponents.Abstractions.Attributes;

@using UIComponents.Abstractions.Enums
@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Interfaces.Services;
@using UIComponents.Abstractions.Models;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Defaults;
@using UIComponents.Models;
@using UIComponents.Models.Models;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Texts;
@using UIComponents.Web.Extensions;

@model UICInputDatetime

@inject IUICLanguageService L

@{
    Model.AssignCollectionForChildren();
    Model.AddAttribute("class", "form-control");

    string step=string.Empty;

    string dateTimeFormat = string.Empty;

    switch (Model.Precision)
    {
        case UICDatetimeStep.Date:
            dateTimeFormat = "yyyy-MM-dd";
            break;
        case UICDatetimeStep.Minute:
            step = "60";
            dateTimeFormat = "yyyy-MM-ddTHH:mm";
            break;
        case UICDatetimeStep.Second:
            step = "1";
            dateTimeFormat = "yyyy-MM-ddTHH:mm:ss";
            break;
        case UICDatetimeStep.Millisecond:
            step = ".001";
            dateTimeFormat = "yyyy-MM-ddTHH:mm:ss.sss";
            break;
    }
    Model.AddAttribute("step", step);

    string id = Model.GetId();
    if (Model.Actions.HasValue())
    {
        Model.Actions.SetIdentifier($"#{id}");
    }


    if (Model.ValidationRequired)
        Model.AddAttribute("required", string.Empty);
    if (Model.ValidationMinimumDate.HasValue)
        Model.AddAttribute("min", Model.ValidationMinimumDate.Value.ToString(dateTimeFormat));

    if (Model.ValidationMaximumDate.HasValue)
        Model.AddAttribute("max", Model.ValidationMaximumDate.Value.ToString(dateTimeFormat));

    if (Model.Value != null)
        Model.AddAttribute("value", Model.Value.Value.ToString(dateTimeFormat));
    if (Model.HasClientSideValidation)
        Model.AddScript(false,@<text>uic.validation.init.validateDateTime($('#@id'));</text>);
}



<input type="@((Model.Precision == UICDatetimeStep.Date)?"date":"datetime-local")" @Html.Raw(Model.GetHtmlAttributes()) />


@await Model.Actions.InvokeAsync(Component)
@await Model.RenderStylesAndScripts(Component)