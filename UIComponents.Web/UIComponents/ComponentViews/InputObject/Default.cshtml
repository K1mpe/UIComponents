@using UIComponents.Abstractions;
@using UIComponents.Abstractions.Attributes;
@using UIComponents.Abstractions.Enums
@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Interfaces.Services;
@using UIComponents.Abstractions.Models;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Defaults;
@using UIComponents.Models;
@using UIComponents.Models.Models;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;
@using UIComponents.Models.Models.Card;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Texts;
@using UIComponents.Web.Extensions;
@model UICInputObject
@{
    Model.AssignCollectionForChildren();
    Model.AddClass("object-input");
    if (Model.Readonly)
        Model.FindAllChildrenOfType<UICInput>().ForEach(x => x.Readonly = true);
}
<div @Html.Raw(Model.GetHtmlAttributes())>
    @await Model.Children.InvokeAsync(Component)
</div>
@await Model.RenderStylesAndScripts(Component)