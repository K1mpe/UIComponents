@using UIComponents.Abstractions.Attributes;
@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Interfaces.Services;
@using UIComponents.Abstractions.Models;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Defaults;
@using UIComponents.Models;
@using UIComponents.Models.Models;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;
@using UIComponents.Models.Models.Card;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Texts;
@using UIComponents.Web.Extensions;
@model UICSignalR
@{
    string id = Model.GetId();
    Model.AddClass("uic-signalR");
    foreach (var child in Model.GetAllChildren().Select(x => x.Component))
    {
        if (child is UIComponent component)
        {
            component.AddAttribute("identifier", $"#{id}");
        }
    }
    Model.AssignCollectionForChildren();

    Model.AddScript(@<text>
        let uicSignalRSubscription = async function(){
        @if (!string.IsNullOrWhiteSpace(Model.Group))
    {
        <text>
            if (connection.state == signalR.HubConnectionState.Connected) {
            await connection.invoke("JoinGroup", '@Model.Group');
            }
            EventManager.subscribe('connected', async () => {
            await connection.invoke("JoinGroup", '@Model.Group');

            });
        </text>
    }
        @if (string.IsNullOrWhiteSpace(Model.SubscriptionName))
    {
        <text>
            console.log('SignalR does not have a subscription!');
        </text>
    }
    else
    {
        <text>
            let aVeryUniqueParameterNameThatNobodyWillAccidentallyUse =  async function (@string.Join(", ", Model.SubscriptionArguments)){
            //SignalR does not work anymore if the html element has been removed.
            if (!$('#@id').length)
                return;
            @if (Model.DisableOnHidden)
            {
                <text>
                    if (uic.form.isHidden($('#@id'))){
                    return;
                    }
                </text>
            }
            let myVeryUniqueValidationProperty = true;
            
            @if(Model.Condition.HasValue())
            {
                <text>
                    myVeryUniqueValidationProperty = function(@string.Join(", ", Model.SubscriptionArguments)){
                        @await Model.Condition.InvokeAsync(Component)
                    }
                    myVeryUniqueValidationProperty = uic.getResultOrInvoke(myVeryUniqueValidationProperty, @string.Join(", ", Model.SubscriptionArguments));
                </text>
            }

            if (@Json.Serialize(Model.Debug) || uic.signalR.Debug) {
                let color = uic.signalR.color(myVeryUniqueValidationProperty);
                console.groupCollapsed('%cSignalR', `color: ${color}`, '@Html.JsEncode(Model.SubscriptionName)', '@Html.JsEncode(Model.Group)');
                console.log('this', this);
                @foreach(var argument in Model.SubscriptionArguments){
                    <text>
                        console.log('@Html.JsEncode(argument):', @argument);
                    </text>
                    }
                }
            }
            try{
                if(myVeryUniqueValidationProperty){
                    @await Model.Action.InvokeAsync(Component)
                }
            } finally{
                if (@Json.Serialize(Model.Debug) || uic.signalR.Debug) {
                    console.groupEnd();
                }
            }
            
            
            
        };
        @if(Model.SubscriptionArguments.Any()){
            <text>
                await connection.on('@Model.SubscriptionName', (@(string.Join(", ", Model.SubscriptionArguments)))=>{ aVeryUniqueParameterNameThatNobodyWillAccidentallyUse.call($('#@id')[0], @(string.Join(", ", Model.SubscriptionArguments)));});
            </text>
        } else{
            <text>
                await connection.on('@Model.SubscriptionName', () =>{aVeryUniqueParameterNameThatNobodyWillAccidentallyUse.call($('#@id')[0]);});
            </text>
        }

        </text>
    }
        }
        uicSignalRSubscription();
        $('#@id').on('uic-find-signalR', ()=>{
            if (!$('#@id').length)
                return;
            console.log('Found SignalR', $('#@id'), '@Html.JsEncode(Model.SubscriptionName)', '@Html.JsEncode(Model.Group)')
        });
        $('#@id').on('uic-triggerSignalR', (ev, ...args)=>{
            aVeryUniqueParameterNameThatNobodyWillAccidentallyUse.call($('#@id')[0], args))
        })
    </text>);
}


<div @Html.Raw(Model.GetHtmlAttributes())>
    @await Model.RenderStylesAndScripts(Component)
</div>
