@using UIComponents.Abstractions;
@using UIComponents.Abstractions.Attributes;
@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Interfaces.Services;
@using UIComponents.Abstractions.Models;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Defaults;
@using UIComponents.Models;
@using UIComponents.Models.Models;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;
@using UIComponents.Models.Models.Card;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Texts;
@using UIComponents.Web.Extensions;

@model UICTabs

@{
    if (Model.RememberTabState)
        Model.RememberTabState = Model.Attributes.ContainsKey("id");

    string id = Model.GetId();
    Model.AddAttribute("class", "card card-tabs");
    Model.AddBodyAttribute("class", "card-body");

    if (Model.Header != null && Model.Header.Color != null)
        Model.AddClass($"card-{Model.Header.Color.ToLower()}");
    else
        Model.AddClass("card-outline");

    Model.AssignCollectionForChildren();

    if (Model.RememberTabState)
    {
        Model.AddScript(
    @<text>
        $('#@id').on('uic-tab-change', (ev, tab)=>{
        localStorage.setItem('tabs-lastState-@id', $(tab).attr('href'));
        })
    </text>
    );
    }
    var cardHeaderTabsAddedClass = string.Empty;
    if (Model.CenterTabs)
        cardHeaderTabsAddedClass += "nav-justified";

    string navClass = string.Empty;
    switch(Model.TabStyle)
    {
        case UICCardWithTabsStyle.Tabs:
            navClass = "nav-tabs";
            break;
        case UICCardWithTabsStyle.Pills:
            navClass = "nav-pills";
            break;
        default:
            throw new NotImplementedException();
    }
}

@if (Model.OnlyRenderSingleContent && Model.Tabs.Where(x => x.HasValue()).Count() == 1 && Model.Tabs.Where(x => x.HasValue()).First() is IUIComponent firstTab)
{
    @await firstTab.InvokeAsync(Component)
}
else
{
    Model.AddScript(
        @<text>
    uic.tabs.openFirstTab($('#@id'));
    window.addEventListener("hashchange", ()=> uic.tabs.openFirstTab($('#@id')));

</text>);
    <div @Html.Raw(Model.GetHtmlAttributes())>
        <div class="card-header">
            <div class="card-header-tabs nav @navClass @cardHeaderTabsAddedClass" role="tablist" aria-orientation="horizontal">
                @await Model.BeforeTabs.InvokeAsync(Component)
                @for (int i = 0; i < Model.Tabs.Count; i++)
                {
                    var tab = Model.Tabs[i];
                    if (tab.HasValue())
                    {
                        await tab.Header.Transformer(Model, tab.Header);
                        tab.Header.AddAttribute("href", $"#{id}-tab{i + 1}");

                        @await tab.Header.InvokeAsync(Component)
                    }
                }
                @await Model.AfterTabs.InvokeAsync(Component)
            </div>

        </div>
        <div @Html.Raw(Model.BodyAttributes.GetHtmlAttributes())>
            <div class="tab-content">
                @for (int i = 0; i < Model.Tabs.Count; i++)
                {
                    if (Model.Tabs[i].HasValue())
                    {
                        var tab = Model.Tabs[i].Content;

                        <div class="tab-pane fade" role="tabpanel" id="@($"{id}-tab{i+1}")">
                            @await tab.InvokeAsync(Component)
                        </div>
                    }
                }
            </div>
        </div>
    </div>
}

@await Model.RenderStylesAndScripts(Component)
