@using UIComponents.Abstractions;
@using UIComponents.Abstractions.Attributes;

@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Interfaces.Services;
@using UIComponents.Abstractions.Models;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Defaults;
@using UIComponents.Defaults.Models.Inputs;
@using UIComponents.Models;
@using UIComponents.Models.Models;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;
@using UIComponents.Models.Models.Card;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Texts;
@using UIComponents.Web.Extensions;

@inject IUICLanguageService L
@model UICInputColor
@{
    Model.AddAttribute("class", "coloris");
    Model.AddAttribute("class", "form-control");
    string id = Model.GetId();

    Model.AssignCollectionForChildren();
    if (Model.Actions.HasValue())
    {
        Model.Actions.SetIdentifier($"#{id}");
    }

    if (Model.OnlySystemColors)
    {
        Model.AddAttribute("class", "only-swatches");
    }
    else if (Model.AllowAlpha)
    {
        Model.AddAttribute("class", "allow-alpha");
    }

    if (Model.ValidationValidColor)
        Model.AddAttribute("data-validation-valid-color", "true");

    if (Model.ValidationRequired)
        Model.AddAttribute("required", "");

}


<div class="@InputColorDefaults.ColorisClass">
    <input type="text" value="@Model.Value" @Html.Raw(Model.GetHtmlAttributes()) />
</div>



@{
    if(Model.HasClientSideValidation){
        Model.AddScript(false,
    @<text>
        uic.validation.init.validateColor($('#@id'));
    </text>);
    }
}

@await Model.Actions.InvokeAsync(Component)

@await Model.RenderStylesAndScripts(Component)