@using UIComponents.Abstractions;
@using UIComponents.Abstractions.Attributes;
@using UIComponents.Abstractions.Enums
@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Interfaces.FileExplorer
@using UIComponents.Abstractions.Interfaces.Services;
@using UIComponents.Abstractions.Models;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Abstractions.Models.FileExplorer
@using UIComponents.Defaults;
@using UIComponents.Models;
@using UIComponents.Models.Models;
@using UIComponents.Models.Models.FileExplorer;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;
@using UIComponents.Models.Models.Card;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Texts;
@using UIComponents.Web.Extensions;

@inject IUICFileExplorerPathMapper _pathMapper;
@model UICFileExplorer

@{
    Model.AddClass("file-explorer-container");
    string id = Model.GetId();

    if (!Model.RootDirectory.EndsWith("/"))
        Model.RootDirectory += "/";
    Model.RootDirectory = Model.RootDirectory.Replace("\\", "/");

    var relPath = _pathMapper.GetRelativePath(Model.RootDirectory);
    string GetRelPath(string input) => input.Replace("\\", "/").Replace(Model.RootDirectory, relPath.RelativePath);
    Model.AssignCollectionForChildren();
    Model
        .AddAttribute("data-controller", Model.ControllerName)
        .AddAttribute("data-rootAbsolutePath", relPath.AbsolutePathReference)
        .AddAttribute("data-rootDirectory", relPath.RelativePath)
        .AddAttribute("for-explorer", id);
    Model.AddScriptDocReady(@<text>

        let filterModel = @Json.Serialize(new GetFilesForDirectoryFilterModel(){
            AbsolutePathReference = relPath.AbsolutePathReference,
            RelativePath = GetRelPath(Model.StartDirectory?? Model.RootDirectory),
            RenderLocation= Model.RenderMethod
        })

        let getFilesForDirectoryResultModel = null;

        $('#@id').on('uic-help', ()=>{

        });

        $('#@id').on('uic-reload', (ev)=>{
            ev.stopPropagation();
            uic.fileExplorer.loadRelativeDir($('#@id'), filterModel.RelativePath);
        });

        $('#@id').on('uic-getFilterModel', ()=>{
            return filterModel;
        });
        $('#@id').on('uic-setFilterModel', (ev, value)=>{
            filterModel = value;
        });
        $('#@id').on('uic-getLastDirectoryResult', ()=>{
            console.log('GetLastResult',getFilesForDirectoryResultModel);
            return getFilesForDirectoryResultModel;
        });
        $('#@id').on('uic-setLastDirectoryResult', (ev, value)=>{
            ev.stopPropagation();
            getFilesForDirectoryResultModel = value;
        });

        $('#@id').on('uic-setRenderer', (ev, value)=>{
            ev.stopPropagation();
            console.log('setting renderer', value);
            $('#@id .file-explorer-main').attr('data-renderer', value);
            uic.fileExplorer.renderFiles($('#@id'));
        });

        uic.fileExplorer.initialize.start($('#@id'));
        uic.fileExplorer.loadRelativeDir($('#@id'), @Html.JsEncode(GetRelPath(Model.StartDirectory??Model.RootDirectory),"'"));
        uic.fileExplorer.showhide.preview($('#@id'), false);
        </text>);
}

<link rel="stylesheet" href="~/lib/jstree/dist/themes/default/style.min.css" />
<script src="/lib/jstree/dist/jstree.min.js"></script>

<div @Html.Raw(Model.GetHtmlAttributes())>
    @await Model.TopContainer.InvokeAsync(Component)
    <div class="file-explorer-body">
        <div class="file-explorer-left">
            @await Model.Left.InvokeAsync(Component)
        </div>
        <div>
            @await Model.TopMain.InvokeAsync(Component)
            <div class="file-explorer-main" data-renderer="@Html.Raw(Model.RenderMethod)">
            </div>
            @await Model.BottomMain.InvokeAsync(Component)
        </div>
        <div class="file-explorer-right">
            @await Model.Right.InvokeAsync(Component)
        </div>
    </div>
    @await Model.BottomContainer.InvokeAsync(Component)
</div>

        
@await Model.RenderStylesAndScripts(Component)