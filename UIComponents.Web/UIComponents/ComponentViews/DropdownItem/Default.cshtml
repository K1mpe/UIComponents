@using UIComponents.Abstractions.Attributes;
@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Interfaces.Services;
@using UIComponents.Abstractions.Models;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Defaults;
@using UIComponents.Models;
@using UIComponents.Models.Models;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;
@using UIComponents.Models.Models.Card;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Texts;
@using UIComponents.Web.Extensions;

@inject IUICLanguageService L
@model UICDropdownItem
@{
    Model.AssignCollectionForChildren();

    Model.AddAttribute("class", "dropdown-item");
    if (Model.Tooltip != null)
        Model.AddAttribute("title", await L.Translate(Model.Tooltip));

    async Task<object> RenderBeforeOrAfter(IUIComponent component)
    {
        if(component is UICButton || component is UICInput)
        {
            
            <span onclick="event.stopPropagation()">
                @await component.InvokeAsync(Component)
            </span>
        }
        else
        {
            @await component.InvokeAsync(Component)
        }
        return null;
    }
}

@if(Model.OnClick == null)
{
    <li>
        <span @Html.Raw(Model.GetHtmlAttributes())>
            @await RenderBeforeOrAfter(Model.BeforeContent)
            @if (Model.Icon.HasValue())
            {
                @await Model.Icon.InvokeAsync(Component)
            }
            else
            {
                <span class="icon"></span>
            }
            @await Html.TranslateHtml(L, Model.Content)
            @await RenderBeforeOrAfter(Model.AfterContent)
        </span>
    </li>
}
else if (Model.OnClick is UICActionNavigate navigate)
{
    Model.AddAttribute("href", navigate.Href);
    <li>
        <a @Html.Raw(Model.GetHtmlAttributes())>
            @await RenderBeforeOrAfter(Model.BeforeContent)
            @if (Model.Icon.HasValue())
            {
                @await Model.Icon.InvokeAsync(Component)
            }
            else
            {
                <span class="icon"></span>
            }
            @await Html.TranslateHtml(L, Model.Content)
            @await RenderBeforeOrAfter(Model.AfterContent)
        </a>
    </li>
}
else
{
   
    Model.RemoveClass("btn")
        .RemoveClass("btn-*");
    string itemId = Model.GetId();
    Model.AddAttribute("href", "#");
    Model.AddScript(
        @<text>
            $('#@itemId').click(async function(e){
            e.preventDefault();
            @await Model.OnClick.InvokeAsync(Component)
            });
        </text>);

    <li>
        <a @Html.Raw(Model.GetHtmlAttributes())>
            @await RenderBeforeOrAfter(Model.BeforeContent)
        @if (Model.Icon.HasValue())
        {
            @await Model.Icon.InvokeAsync(Component)
        }
        else
        {
            <span class="icon"></span>
        }
            @await Html.TranslateHtml(L, Model.Content, null)
            @await RenderBeforeOrAfter(Model.AfterContent)
        </a>
    </li>
    //Create the script for the click on the dropdown item, and store it for later. This script will be rendered after all dropdown items.
    
                        
}

@await Model.RenderStylesAndScripts(Component)