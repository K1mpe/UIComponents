@using UIComponents.Abstractions.Attributes;
@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Interfaces.Services;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Abstractions.Models;
@using UIComponents.Models;
@using UIComponents.Models.Models;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Texts;
@using UIComponents.Web.Extensions;
@using System.Reflection;

@model UICInputGroup

@{
    if (Model.Label.HasValue())
        Model.Label?.AddAttribute("for", Model.Input.GetId());

    if (Model.Span.HasValue())
    {
        Model.Span.AddAttribute("class", "form-text");
        Model.Span.AddAttribute("class", "text-muted");
    }
    string addedClass = "form-column";
    if (Model.Input.TryGetPropertyValue<object>(nameof(UICInput<string>.Value), out var value))
    {
        //If value is null, add classes to make the input hidden in readonly
        if (string.IsNullOrEmpty(value?.ToString() ?? null))
        {
            addedClass += " input-no-value";
        }
        else if (Model.Input is UICInputSelectList selectlist)
        {
            if (selectlist.Value == "0")
                addedClass += " input-no-value";

        }
    }
    else
    {
        //If value is null, add classes to make the input hidden in readonly
        addedClass += " input-no-value";
    }
    addedClass += $" {Model.GetAttribute("class")}";
    Model.Label?.AddAttribute("class", addedClass);



    if (Model.Hidden)
    {
        if (Model.Label.HasValue())
            Model.Label.Hidden = true;

    }

    Model.AddCss("display", "contents");
}


<div @Html.Raw(Model.GetHtmlAttributes())>
    @await Model.Label.InvokeAsync(Component)
    <div class="@addedClass" @Html.Raw(Model.Hidden ? "hidden" : "")>
        @if (Model.PrependInput.Any() || Model.AppendInput.Any())
        {
            <div class="input-group">

                @foreach (var prepend in Model.PrependInput)
                {
                    string prependClass = "input-group-text";
                    var attr = prepend.GetType().GetCustomAttribute<PrependAppendInputGroupClass>();
                    if (attr != null)
                        prependClass = attr.PrependClass;

                    if (prepend is UICIcon icon)
                    {
                        <span class="@prependClass">
                            @await prepend.InvokeAsync(Component)
                        </span>
                    }
                    else
                    {
                        prepend.AddAttribute("class", prependClass);
                        @await prepend.InvokeAsync(Component)
                    }
                }

                @await Model.Input.InvokeAsync(Component)

                @foreach (var append in Model.AppendInput)
                {
                    string appendClass = "input-group-text";
                    var attr = append.GetType().GetCustomAttribute<PrependAppendInputGroupClass>();
                    if (attr != null)
                        appendClass = attr.AppendClass;

                    if (append is UICIcon icon)
                    {
                        <span class="@appendClass">
                            @await append.InvokeAsync(Component)
                        </span>
                    }
                    else
                    {
                        append.AddAttribute("class", appendClass);
                        @await append.InvokeAsync(Component)
                    }
                }
            </div>
            <span class="d-block field-validation-valid text-danger" data-valmsg-for="@Model.Input.PropertyName"></span>

            @await Model.Span.InvokeAsync(Component)

        }
        else
        {
            @await Model.Input.InvokeAsync(Component)
            <span class="d-block field-validation-valid text-danger" data-valmsg-for="@Model.Input.PropertyName"></span>

            @await Model.Span.InvokeAsync(Component)
        }
    </div>
</div>




