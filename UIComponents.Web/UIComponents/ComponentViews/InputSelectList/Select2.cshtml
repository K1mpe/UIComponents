@using UIComponents.Abstractions;
@using UIComponents.Abstractions.Attributes;

@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Interfaces.Services;
@using UIComponents.Abstractions.Models;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Defaults;
@using UIComponents.Models;
@using UIComponents.Models.Models;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Texts;
@using UIComponents.Web.Extensions;

@inject IUICLanguageService L

@model UICInputSelectList

@{
    Model.AddAttribute("class", "form-control");

    Model.AssignCollectionForChildren();
    Model.Actions.Renderer = UICActions.ActionsRenderer.Select2;

    string id = Model.GetId();

    if (!string.IsNullOrEmpty(Model.Value) ||true)
    {
        Model.SelectListItems.FirstOrDefault(x => (x.Value?.ToString() ?? string.Empty) == Model.Value, new()).Selected = true;
        Model.AddAttribute("value", Model.Value);
    }
    var hasEmptyItem = Model.SelectListItems.Where(x => x.Value == null).Any();

    Model.Actions.SetIdentifier($"#{id}");

    if (Model.Readonly)
        Model.AddAttribute("class", "form-control-plaintext");
    if (Model.AllowDynamicOptions)
        Model.SearchableIfMinimimResults = 0;


    if (Model.Color != null)
    {

        Model.AddStyle(
    @<text>
        #@id + span .select2-selection__choice{
        background-color: var(--@Model.Color.ToLower()) !important;
        border-color: var(--@Model.Color.ToLower()) !important;
        }
        #@id + span.select2-container--focus .select2-selection--single {
        border-color: var(--@Model.Color.ToLower()) !important;
        }
        #select2-@(id)-results .select2-results__option--highlighted{
        background-color: var(--@Model.Color.ToLower()) !important;
        }
    </text>
        );
    }
    Model.AddScript(false, 
    @<text>
        $('#@id').on('uic-help', ()=>{
        console.log("$('#@id').on('uic-open', ()=>{...}) Triggered when opening the selectlist");
        });
        $('#@id').on('uic-getValue', (ev)=>{
        return $('#@id').val() || $('#@id').attr('value');
        });

        uic.partial.onDispose('#@id', ()=> {
            if( $('#@id').hasClass('select2-hidden-accessible'))
                $('#@id').select2('destroy');
        });

        $('#@id').select2({
        //theme: 'bootstrap4',
        minimumResultsForSearch: @Json.Serialize(Model.SearchableIfMinimimResults),
        matcher: uic.form.select2.searchMethod,
        templateResult: uic.form.select2.resultRenderer,
        tags: @Json.Serialize(Model.AllowDynamicOptions),
        width:'',
        dropdownParent: $('#@id').closest('form, .card, body'),
        @if(Model.Placeholder != null && !hasEmptyItem){
        <text>
            placeholder: @await Html.TranslateJs(L, Model.Placeholder, "'"),
        </text>
    }
        });
        @if(Model.Placeholder != null && hasEmptyItem){
        <text>
            //manually set the placeholder because select2 refuses to show the option with empty value when using the placeholder
            if(uic.getValue('#@id') ==''){
                let rendered = $('#@id').next().find('.select2-selection__rendered');
                if(rendered.text().trim() =='')
                    rendered.html($('<span>',{class:'select2-selection__placeholder'}).html(@await Html.TranslateJs(L, Model.Placeholder, "'")));
            }
        </text>
    }

        $('#@id').on('select2:opening', function(){
        uic.delayedAction.run('OpenDropdown-@id', 100, ()=>{$('#@id').triggerHandler('uic-open')});
        })
        $('#@id').on('uic-setValue', function (event, value) {
            event.stopPropagation();
            $(this).attr('value', '');
            $(this).val(value).change();
            if(!$(this).find(`option[value="${value}"]`).length)
                $(this).attr('value', value);
        });

        $('#@id').on('focus', ()=>{
            $('#@id').trigger('uic-open');
        });

        $('#@id').on('uic-open', (ev)=> ev.stopPropagation());
        
        @if(Model.HasClientSideValidation)
        {
            <text>
            uic.validation.init.validateSelect($('#@id'));
            </text>
        }
        </text>
    );


    var groups = Model.SelectListItems.Where(x => x.Group != null).Select(x => x.Group).DistinctBy(x => x.Name).ToList();
    var others = Model.SelectListItems.Where(x => x.Group == null).ToList();

    int minValue = Math.Min(groups.Any() ? groups.Min(x => x.SortOrder) : 0, others.Any() ? others.Min(x => x.SortOrder) : 0);
    int maxValue = Math.Max(groups.Any() ? groups.Max(x => x.SortOrder) : 0, others.Any() ? others.Max(x => x.SortOrder) : 0);
}

@if (Model.SelectListItems.Where(x => x.Render && (x.PrependText.AnyHasValue() || x.AppendText.AnyHasValue())).Any())
{
    Model.AddClass("has-select-elements");
    <div class="select-elements" for-select="@id" hidden>
        @foreach (var group in groups)
        {
            if (group.PrependText.AnyHasValue())
            {
                <div class="prepend-group" for-label="@group.Name">
                    @await group.PrependText.InvokeAsync(Component)
                </div>
            }
            if (group.AppendText.AnyHasValue())
            {
                <div class="append-group" for-label="@group.Name">
                    @await group.AppendText.InvokeAsync(Component)
                </div>
            }
        }

        @foreach (var item in Model.SelectListItems.Where(x => x.Render))
        {
            if (item.PrependText.AnyHasValue())
            {
                <div class="prepend-item" for-value="@item.Value">
                    @await item.PrependText.InvokeAsync(Component)
                </div>
            }
            if (item.AppendText.AnyHasValue())
            {
                <div class="append-item" for-value="@item.Value">
                    @await item.AppendText.InvokeAsync(Component)
                </div>
            }
        }
    </div>
}
<select @Html.Raw(Model.GetHtmlAttributes())>
    @if (Model.SelectListItems.Any())
    {
        for (int i = minValue; i <= maxValue; i++)
        {
            foreach (var item in Model.SelectListItems.Where(x => x.Group == null && x.SortOrder == i))
            {
                @await item.InvokeAsync(Component)
            }
            foreach (var group in groups.Where(x => x.SortOrder == i))
            {
                group.AddAttribute("label", group.Name);
                if (group.Tooltip != null)
                    group.AddAttribute("title", await L.Translate(group.Tooltip));

                <optgroup @Html.Raw(group.GetHtmlAttributes()) @(group.Disabled ? "disabled" : "")>
                    @foreach (var item in Model.SelectListItems.Where(x => x.Group != null && x.Group.Name == group.Name).OrderBy(x => x.SortOrder))
                    {
                        @await item.InvokeAsync(Component)
                    }
                </optgroup>
            }

        }
    }
    else if (Model.NoItemsText != null)
    {
        <option disabled>@await Html.TranslateHtml(L, Model.NoItemsText, null)</option>
    }


</select>


@await Model.Actions.InvokeAsync(Component)
@await Model.RenderStylesAndScripts(Component)