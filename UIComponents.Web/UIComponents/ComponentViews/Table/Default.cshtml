@using UIComponents.Abstractions.Attributes;
@using UIComponents.Abstractions.Enums
@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Interfaces.Services;
@using UIComponents.Abstractions.Models;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Defaults;
@using UIComponents.Models;
@using UIComponents.Models.Models;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;
@using UIComponents.Models.Models.Card;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Tables;
@using UIComponents.Models.Models.Tables.TableColumns
@using UIComponents.Models.Models.Texts;
@using UIComponents.Web.Extensions;

@model UICTable

@{

    bool hasId = !String.IsNullOrEmpty(Model.GetAttribute("id"));
    if (!hasId)
        Model.SaveFiltersInLocalStorage = false;

    if (Model.Selecting)
        Model.AddClass("has-selecting");

    string id = Model.GetId();
    Model.AssignCollectionForChildren();

    if (string.IsNullOrEmpty(Model.PagingSelector))
        Model.PagingSelector = $"paging-{id}";

    if (Model.Minimal)
        Model.AddClass("jsgrid-minimal");


    if (Model.PageSize != int.MaxValue && Model.PageSize > 0)
        Model.AddScript(@<text>
            uic.jsgrid.pager_generate(@Html.JsEncode(id, "'"), @Html.JsEncode(Model.PagingSelector,"'"));
        </text>
    );

    if (Model.OnInsertButtonClick.HasValue())
        Model.AddScript(@<text>
            setTimeout(()=>{
                $('#@id .jsgrid-insert-mode-button').off('click');
                $('#@id .jsgrid-insert-mode-button').on('click', async(args)=>{
                    @await Model.OnInsertButtonClick.InvokeAsync(Component)
                });
            },500);
            </text>
    );

    if (Model.EnableTooltip)
        Model.AddScript(@<text>
            setTimeout(()=>{
                $('#@id td').each(()=>{
                    if($(this).attr('title'))
                        return;
                    $(this).attr('title', $(this).text());
                });
            }, 500);
            </text>
    );

    if (Model.OnRowClick.HasValue())
        Model.AddClass("has-row-click");

    //When the control column is already defined, or AddControlColumn is true with at least one of the change options enabled
    if (Model.Columns.Any(x => x is UICTableColumnControl) || (Model.AutoAddControlColumn && (Model.EnableInsert || Model.EnableUpdate || Model.EnableDelete)))
    {
        Model.AddControlColumn(x =>
        {
            if(x.Inserting == null)
                x.Inserting = (Model.EnableInsert && Model.OnInsertItem.HasValue()) || Model.OnInsertButtonClick.HasValue();
            
            if(x.EditButton == null)
                x.EditButton = Model.EnableUpdate && Model.OnUpdateItem.HasValue();

            if(x.DeleteButton == null)
                x.DeleteButton = Model.EnableDelete && Model.OnDeleteItem.HasValue();
        });

    }


    Model.AddScript(@<text>
            $('#@id').on('uic-help', ()=>{
                console.log("JsGrid $('#@id').trigger('uic-reload') => Reload the table if allowed.");
                console.log("JsGrid $('#@id').trigger('uic-forceReload') => Always reload the table. (Not recommended!)");
                console.log("JsGrid $('#@id').trigger('uic-disableReload') => Disable reloading the table");
                console.log("JsGrid $('#@id').trigger('uic-enableReload') => Enable reloading the table. Will also trigger reload if a reload has failed");
                console.log("JsGrid $('#@id').trigger('uic-addReloadCondition', ()=> {...}) => Add a new function that is checked on each reload. Returning false will disable the reload");
                console.log("JsGrid $('#@id').trigger('uic-reloadConditionChanged') => One or more of the reload conditions have changed.");

                console.log("JsGrid $('#@id').on('uic-getFilters', (args)=> {... return args}) => Called before loading data. Using this callback you can overwrite the filter data or sorting.");
                console.log("JsGrid $('#@id').on('uic-beforeFetch', (args)=> {...}) => Triggered just before the LoadData function is called.");
                console.log("JsGrid $('#@id').on('uic-afterFetch', (data, args)=> {...}) => Triggered after the LoadData function is called.");
                
                console.log("JsGrid $('#@id').on('uic-beforeInsert', (item)=> {...}) => Triggered before inserting a item in the table.");
                console.log("JsGrid $('#@id').on('uic-afterFetch', (item)=> {...}) => Triggered after inserting a item in the table.");
                
                console.log("JsGrid $('#@id').on('uic-beforeUpdate', (item)=> {...}) => Triggered before updating a item in the table.");
                console.log("JsGrid $('#@id').on('uic-beforeUpdate', (item)=> {...}) => Triggered after updating a item in the table.");
                
                console.log("JsGrid $('#@id').on('uic-beforeDelete', (item)=> {...}) => Triggered before deleting a item in the table.");
                console.log("JsGrid $('#@id').on('uic-afterDelete', (item)=> {...}) => Triggered after deleting a item in the table.");


                console.log("JsGrid $('#@id').on('uic-dataLoaded', (args)=> {...}) => Triggered after data is loaded.");
                console.log("JsGrid $('#@id').on('uic-editingData', (args)=> {...}) => Triggered when opening a edit row.");
                console.log("JsGrid $('#@id').on('uic-dataLoadedAndFiltered') => Triggered after the selectlists are filtered.");
            });

            let canReload = true; //Can the JsGrid Reload
            let tryReload = false; //If Reload Denied, set this true
            let reloadConditions = []; // This is a list of reloadConditions. If all conditions return true, reload is enabled.
            let checkCanReload = function(){
                if(!canReload)
                    return false;

                for(let i=0; reloadConditions.length>i; i++){
                    let condition = reloadConditions[i];
                    let result = condition();
                    if(!result)
                        return false;
                }
                return true;
            };
            $('#@id').on('uic-reload', (ev)=>{
                ev.stopPropagation();
                @if(Model.ReloadDelay > 0){
                    <text>
                    uic.delayedAction.run("jsGrid-Reload-@id", @Json.Serialize(Model.ReloadDelay), ()=>{
                        if(checkCanReload()){
                            $('#@id').trigger('uic-forceReload')
                        } else{
                            tryReload = true;
                        }
                    });
                    </text>
                } else{
                     <text>
                    if(checkCanReload()){
                        $('#@id').trigger('uic-forceReload')
                    } else{
                        tryReload = true;
                    }
                    </text>
                }
                
            });
            $('#@id').on('uic-forceReload', (ev)=>{
                ev.stopPropagation();
                $('#@id').jsGrid('loadData');
            });

            $('#@id').on('uic-reloadConditionChanged', (ev)=>{
                ev.stopPropagation();
                if(!tryReload)
                    return;
                if(!checkCanReload())
                    return;

                tryReload = false;
                $('#@id').trigger('uic-reload');
            });
            $('#@id').on('uic-addReloadCondition',(ev, condition)=>{
                ev.stopPropagation();
                reloadConditions.push(condition);
            });
            $('#@id').on('uic-enableReload', (ev)=>{
                ev.stopPropagation();
                canReload = true;
                $('#@id').trigger('uic-reloadConditionChanged');
            })
            $('#@id').on('uic-disableReload', (ev)=>{
                ev.stopPropagation();
                canReload = false;
            });

            $('#@id').jsGrid({
                height: @Html.JsEncode(Model.Height, "'"),
                width: @Html.JsEncode(Model.Width,"'"),

                selecting: @Json.Serialize(Model.Selecting), 
                filtering : @Json.Serialize(Model.Filtering),
                inserting: @Json.Serialize(Model.EnableInsert && Model.OnInsertItem.HasValue()),
                editing: @Json.Serialize(Model.EnableUpdate && Model.OnUpdateItem.HasValue()),
                deleting: @Json.Serialize(Model.EnableDelete && Model.OnDeleteItem.HasValue()),
                sorting: @Json.Serialize(Model.Sorting),
                paging: true,
                pageLoading: true,
                pageSize: @Json.Serialize(Model.PageSize),

                onInit: async function(args){
                    @if(Model.OnInit.HasValue()){
                        <text>
                            @await Model.OnInit.InvokeAsync(Component)
                        </text>
                    } else{
                        var defaultFilterObject= new Dictionary<string, object>();
                        foreach(var column in Model.Columns.Where(x=>x is UICTableColumn tableColumn && tableColumn.PropertyInfo != null && tableColumn.DefaultFilter != null).OfType<UICTableColumn>()){
                            defaultFilterObject[column.PropertyInfo.Name] = column.DefaultFilter;
                        }
                        <text>
                        let result = await uic.jsgrid.onInit('@id', @Json.Serialize(Model.SaveFiltersInLocalStorage), args, @Html.Raw(Model.Sorter?.ToString()??"null"), @Json.Serialize(defaultFilterObject));
                        </text>
                    }
                    $('#@id').trigger('uic-initialized');
                },
                onDataLoaded: async function(args){
                    $('#@id').trigger('uic-dataLoaded', args);
                    @await Model.OnDataLoaded.InvokeAsync(Component)
                },
                onItemEditing: async function(args){
                    $('#@id').trigger('uic-editingData', args);
                    @await Model.OnDataEditing.InvokeAsync(Component)
                },
                @if(Model.OnItemDeleting.HasValue()){
                    <text>
                    onItemDeleting: async function(args){
                        @await Model.OnItemDeleting.InvokeAsync(Component)
                    },
                    </text>
                }
               
                @if(Model.OnRowClick.HasValue() || !Model.EditOnRowClick)
                {
                    <text>
                    rowClick: async function(args){
                        @await Model.OnRowClick.InvokeAsync(Component)
                    },
                    </text>
                }

                fields: [
            @foreach(var column in Model.Columns)
            {
                <text>
                    @await column.InvokeAsync(Component)
                </text>
            }
                ],
                controller: {
                    loadData: async (args) => {
                        args = $('#@id').triggerHandler('uic-getFilters', args) || args; //The 'on.('uic-getFilters')' may change the filter arguments.
                        $('#@id').trigger('uic-beforeFetch');

                        @if(Model.SaveFiltersInLocalStorage)
                        {
                        <text>
                        try{
                            localStorage.setItem("Grid.@(id).Filters", JSON.stringify(args));
                        }catch{}
                        </text>
                        }
                            @if(Model.Data != null && Model.Data.Any()){
                            <text>
                                let result = uic.jsgrid.filterClientSide(args, @Json.Serialize(Model.Data));
                                result = uic.jsgrid.pageClientSide(result, args.pageIndex, args.pageSize);
                                
                                $('#@id').trigger('uic-afterFetch', [result, args]);
                                return result;
                            </text>
                        } else if(Model.LoadData is UICActionGetPost getpost){
                            if(!getpost.GetVariableData.HasValue())
                                getpost.GetVariableData = new UICCustom("{filter: args}");
                            <text>
                                @await Model.LoadData.InvokeAsync(Component)
                                @Html.JsEncode(getpost.ResultName) =  uic.jsgrid.pageClientSide(@Html.JsEncode(getpost.ResultName), args.pageIndex, args.pageSize);

                                $('#@id').trigger('uic-afterFetch', [@Html.JsEncode(getpost.ResultName), args]);
                                return @Html.JsEncode(getpost.ResultName);
                            </text>
                        } else{
                            <text>
                            @await Model.LoadData.InvokeAsync(Component);
                            </text>
                        }
                        
                        
                        
                    },
                    @if(Model.EnableInsert && Model.OnInsertItem.HasValue()){
                        if(Model.OnInsertItem is UICActionGetPost getpost && !getpost.GetVariableData.HasValue()){
                            getpost.GetVariableData = new UICCustom("item");
                        }
                        <text>
                        insertItem: async function(item){
                            $('#@id').trigger('uic-beforeInsert', item);
                            @await Model.OnInsertItem.InvokeAsync(Component)
                            $('#@id').trigger('uic-afterInsert', item);
                        },
                        </text>
                    }
                    @if(Model.EnableUpdate && Model.OnUpdateItem.HasValue()){
                        if(Model.OnUpdateItem is UICActionGetPost getpost && !getpost.GetVariableData.HasValue()){
                            getpost.GetVariableData = new UICCustom("item");
                        }
                        <text>
                        updateItem: async function (item) {
                            $('#@id').trigger('uic-beforeUpdate');
                            @await Model.OnUpdateItem.InvokeAsync(Component)
                            $('#@id').trigger('uic-afterUpdate');
                        },
                        </text>
                    }
                    @if(Model.EnableDelete && Model.OnDeleteItem.HasValue()){
                        if(Model.OnDeleteItem is UICActionGetPost getpost && !getpost.GetVariableData.HasValue()){
                            getpost.GetVariableData = new UICCustom("item");
                        }
                        <text>
                         deleteItem: async function(item){
                            $('#@id').trigger('uic-beforeDelete');
                            @await Model.OnDeleteItem.InvokeAsync(Component)
                            $('#@id').trigger('uic-afterDelete');
                        },
                        </text>
                    }
                },
                @if(Model.RowRenderer.HasValue()){
                    <text>
                    rowRenderer: function(item, index){
                        @await Model.RowRenderer.InvokeAsync(Component)
                    },
                    </text>
                }
                @if(Model.ReplaceLoadingIndicator){
                    <text>

                    loadIndicator : {
                        show: function(){
                            uic.partial.showLoadingOverlay($('#@id .jsgrid-grid-body'));
                        },
                        hide: function(){
                                uic.partial.hideLoadingOverlay($('#@id .jsgrid-grid-body'));
                            },
                        },
                    </text>
                }
                @await Model.AdditionalConfig.InvokeAsync(Component)
            });

            @if(Model.Resizable){
                <text>
                $('#@id').on('uic-afterFetch', ()=>{
                    setTimeout(()=>{
                        uic.jsgrid.resizeColumn($('#@id'));
                    },1);
                });
                </text>
            }
            @if(Model.SaveOnBlur || Model.SaveOnEnter)
            {
                <text>
                $('#@id').on('uic-editingData', (ev, args)=>{
                    @if(Model.SaveOnBlur)
                    {
                        <text>
                let oldEditRow = $('#@id .jsgrid-edit-row');
                if(oldEditRow.length)
                    $('#@id').jsGrid('updateItem');
                            
                            // oldEditRow.find('.jsgrid-update-button').click();
                        </text>
                    }

                    @if(Model.SaveOnEnter)
                    {
                    <text>
                        setTimeout(()=>{
                        
                            let editRow = $('#@id .jsgrid-edit-row');
                        
                            editRow.on('keyup', (ev)=>{
                                if(ev.keyCode == 13)
                                    editRow.find('.jsgrid-update-button').click();
                            });
                        },100);
                    </text>
                    }
                });
                </text>
            }
            $('#@id').trigger('uic-addReloadCondition', ()=>{
                if($('#@id .jsgrid-partial-content').length){
                    console.log('Reloading is blocked by partial content!')
                    return false;
                }
                return true;
            });
            $('#@id').on('uic-closePartial', (ev)=>{
                $('#@id').trigger('uic-reloadConditionChanged');
            });

            </text>);
}

<div id="@($"{id}-container")">
    <div @Html.Raw(Model.GetHtmlAttributes())>

    </div>
</div>
@await Model.SignalRRefreshTriggers.InvokeAsync(Component)
@await Model.RenderStylesAndScripts(Component)
