@using UIComponents.Abstractions;
@using UIComponents.Abstractions.Attributes;
@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Interfaces.Services;
@using UIComponents.Abstractions.Models;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Defaults;
@using UIComponents.Models;
@using UIComponents.Models.Models;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;
@using UIComponents.Models.Models.Card;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Texts;
@using UIComponents.Web.Extensions;

@model UICContextMenuCategory

@{

    string guid = "cmi" + Guid.NewGuid().ToString("N").Substring(0, 4);
    Model.AssignCollectionForChildren(guid);
    Model.AddScript(
    @<text>
        uic.contextMenu.addCategory({
            categoryId: @Html.JsEncode(Model.CategoryId,"'"),
            categoryRenderer: @await Model.CategoryRenderer.InvokeAsync(Component),
            @if(Model.MenuItem.HasValue()){
                <text>
                menuItem:{
                    selector: '@Html.Raw(Model.MenuItem.Selector())',

                    @if (!string.IsNullOrEmpty(Model.MenuItem.Id))
                    {
                    <text>
                        id: '@Html.Raw(Model.MenuItem.Id)',
                    </text>
                    }

                    @if (!string.IsNullOrWhiteSpace(Model.MenuItem.Category))
                    {
                    <text>
                        category: '@Html.Raw(Model.MenuItem.Category)',
                    </text>
                    }

                    @if (Model.MenuItem.DropdownItem.HasValue())
                    {
                    <text>
                        element: $('#@guid').html(),
                    </text>
                    }

                    @if (Model.MenuItem.Position != null)
                    {
                    <text>
                        position: @Json.Serialize(Model.MenuItem.Position.Value),
                    </text>
                    }
                    optional: @Json.Serialize(Model.MenuItem.Optional),


                    @if (Model.MenuItem.OnClick.HasValue())
                    {
                    <text>
                        onClick: async function(target, clickedElement, event){
                            @await Model.MenuItem.OnClick.InvokeAsync(Component)
                        },
                    </text>
                    }

                    @if (Model.MenuItem.Text.HasValue())
                    {
                    <text>
                        text: @await Model.MenuItem.Text.InvokeAsync(Component),
                    </text>
                    }

                    @if (Model.MenuItem.Title.HasValue())
                    {
                    <text>
                        title: @await Model.MenuItem.Title.InvokeAsync(Component),
                    </text>
                    }

                    @if (Model.MenuItem.Attributes.HasValue())
                    {
                    <text>
                        attr: @await Model.MenuItem.Attributes.InvokeAsync(Component),
                    </text>
                    }
                }
                </text>
            }
        
        });
    </text>);

}

@if (Model.MenuItem.HasValue())
{
    <script type="text/html" id="@guid">
        @await Model.MenuItem.DropdownItem.InvokeAsync(Component)
    </script>
}


@await Model.RenderStylesAndScripts(Component,guid)