@using UIComponents.Abstractions;
@using UIComponents.Abstractions.Attributes;
@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Interfaces.Services;
@using UIComponents.Abstractions.Models;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Defaults;
@using UIComponents.Models;
@using UIComponents.Models.Models;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;
@using UIComponents.Models.Models.Card;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Texts;
@using UIComponents.Web.Extensions;

@model UICSidePanel

@{
    string id = Model.GetId();


    Model.AssignCollectionForChildren();

    Model.Initialize();

    Model.AddClass("side-panel-container horizontal row");
    Model.AddAttribute("data-sidebar-name", Model.SidePanelIdentifier);
    
    Model.ButtonToolbar.AddClass("sidepanel-header-toolbar");

}

@if (Model.SidePanelContent.HasValue())
{
    Model.AddScriptDocReady(
    @<text>

        @if(Model.BeforePinned.HasValue())
        {
            <text>
                $('#@Model.GetId()').on('uic-before-pinned', async(ev)=>{
                    @await Model.BeforePinned.InvokeAsync(Component)
                });
            </text>
        }
        @if(Model.AfterPinned.HasValue())
        {
            <text>
                $('#@Model.GetId()').on('uic-after-pinned', async(ev)=>{
                    @await Model.AfterPinned.InvokeAsync(Component)
                });
            </text>
        }
        @if(Model.BeforeCollapsed.HasValue()){
            <text>
                $('#@Model.GetId()').on('uic-before-collapsed', async(ev)=>{
                    @await Model.BeforeCollapsed.InvokeAsync(Component)
                });
            </text>
        }
        @if(Model.AfterCollapsed.HasValue()){
            <text>
                $('#@Model.GetId()').on('uic-after-collapsed', async(ev)=>{
                    @await Model.AfterCollapsed.InvokeAsync(Component)
                });
            </text>
        }
        @if(Model.BeforeOverlay.HasValue()){
            <text>
                $('#@Model.GetId()').on('uic-before-overlay', async(ev)=>{
                    @await Model.BeforeOverlay.InvokeAsync(Component)
                });
            </text>
        }
        @if(Model.AfterOverlay.HasValue()){
            <text>
                $('#@Model.GetId()').on('uic-after-overlay', async(ev)=>{
                    @await Model.AfterOverlay.InvokeAsync(Component)
                });
            </text>
        }
        uic.sidePanel.initialize($('#@id'), @((int)Model.DefaultState));
    </text>);
    <div @Html.Raw(Model.GetHtmlAttributes())>
        <div class="side-panel col col-1 d-none">
            <div class="card">
                @await Model.ButtonToolbar.InvokeAsync(Component)
                <div class="card-body p-1">
                    @await Model.SidePanelContent.InvokeAsync(Component)
                </div>
            </div>
        </div>
        @await Model.OpenSidebarButton.InvokeAsync(Component)
        <div class="side-panel-content col">
            @await Model.MainContent.InvokeAsync(Component)
        </div>
    </div>

}
else
{
    @await Model.MainContent.InvokeAsync(Component)
}


@await Model.RenderStylesAndScripts(Component)