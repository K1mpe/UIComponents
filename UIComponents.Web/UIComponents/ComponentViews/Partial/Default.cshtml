@using UIComponents.Abstractions.Attributes;
@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Interfaces.Services;
@using UIComponents.Abstractions.Models;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Defaults;
@using UIComponents.Models;
@using UIComponents.Models.Models;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Texts;
@using UIComponents.Web.Extensions;

@model UICPartial

@{
    string id = Model.GetId();

    Model.AssignCollectionForChildren();

    if (Model.GetHtml != null)
    {
        Model.AddAttribute("class", "partial-source");

        if (Model.GetHtml.ClientSideOptions == null)
            Model.GetHtml.ClientSideOptions = new UICCustom(
    @<text>
        {
        handlers: uic.partial.handlers,
        loadType: "html",
        cancelPreviousRequests: true
        }
    </text>);

    Model.AddScript(
    @<text>
        @Html.UICHelp(Model, "uic.partial.help")

        uic.partial._init($('#@Model.GetId()'), @Json.Serialize(!Model.SkipInitialLoad), @Json.Serialize(Model.ReloadDelay?.TotalMilliseconds??0));
        $('#@id').on('uic-forceReload', (ev)=>{
            ev.stopPropagation();
            uic.partial._reloadPartial($('#@id'), @Json.Serialize(Model.ShowLoadingOverlay), async() =>{

                @await Model.GetHtml.InvokeAsync(Component);
                return @Html.Raw(Model.GetHtml.ResultName);
            });
            uic.partial._partialData['@id'].tryReload = false;
        });

        $('#@id').on('uic-source', ()=>{
            let source = '@Json.Serialize($"/{Model.GetHtml.Controller}/{Model.GetHtml.Action}")';
            console.log('partial source', $('#@id'), source, @Json.Serialize(Model.GetHtml.FixedData));
            return source;
        });

        @if(Model.BeforeFetch != null)
        {
        <text>
            $('#@id').on('uic-before-reload', async () =>{
            @await Model.BeforeFetch.InvokeAsync(Component);
            })
        </text>
        }

        @if (Model.AfterFetch != null)
        {
        <text>
            $('#@id').on('uic-reloaded', async () =>{
                @await Model.AfterFetch.InvokeAsync(Component);
            })
        </text>
        }
        @if(Model.ReloadIfParentOpens){
        <text>
            $('#@id').parents('.card, .tab-pane').on('uic-opened', ()=> {
                $('#@id').trigger('uic-reload');
            });
        </text>
    }
        @if (!Model.ReloadIfHidden)
        {
        <text>
            $('#@id').parents('.card, .tab-pane').on('uic-opened', ()=> {
                $('#@id').trigger('uic-reloadConditionChanged');
            });
            $('#@id').trigger('uic-addReloadCondition', ()=> !uic.form.isHidden('#@id'));
        </text>
        }
        @if(!Model.SkipInitialLoad)
        {
        <text>
            $('#@id').triggerHandler('uic-reload');
        </text>
        }
    </text>);

    }
}

<div @Html.Raw(Model.GetHtmlAttributes())>
    @foreach (var child in Model.Children)
    {
        @await child.InvokeAsync(Component)
    }
</div>

@await Model.RenderStylesAndScripts(Component)