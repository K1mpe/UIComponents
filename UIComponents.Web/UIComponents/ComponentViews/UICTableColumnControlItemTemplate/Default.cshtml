@using UIComponents.Abstractions;
@using UIComponents.Abstractions.Attributes;
@using UIComponents.Abstractions.Enums
@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Interfaces.Services;
@using UIComponents.Abstractions.Models;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Defaults;
@using UIComponents.Models;
@using UIComponents.Models.Models;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;
@using UIComponents.Models.Models.Card;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Tables;
@using UIComponents.Models.Models.Tables.TableColumns;
@using UIComponents.Models.Models.Texts;
@using UIComponents.Web.Extensions;
@using static UIComponents.Models.Models.Tables.TableColumns.UICTableColumnControl
@model UICTableColumnControlItemTemplate
<text>
    let $result = jsGrid.fields.control.prototype.itemTemplate.apply(this, arguments);
    $result.prepend(await await uic.getResultOrInvoke(@await Model.BeforeButtons.InvokeAsync(Component), item));
    $result.append(await await uic.getResultOrInvoke(@await Model.AfterButtons.InvokeAsync(Component), item));
    return $result;
</text>