@using UIComponents.Abstractions.Attributes;
@using UIComponents.Abstractions.Enums
@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Interfaces.Services;
@using UIComponents.Abstractions.Models;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Defaults;
@using UIComponents.Models;
@using UIComponents.Models.Models;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;
@using UIComponents.Models.Models.Card;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Texts;
@using UIComponents.Web.Extensions;

@model UICModal

@{
    var id = Model.GetId();
    Model
    .AddClass("modal")
    .AddClass("fade")
    .AddAttribute("role", "dialog")
    .AddAttribute("tabindex", "-1");

    if (Model.DisableCloseOnClickout)
        Model.AddAttribute("data-backdrop", "static");

    if(Model.Header != null)
    {
        if(Model.Header is UICCardHeader cardHeader)
        {
            await cardHeader.Transformer(Model, Model.Header);
        }
    }
    Model.AssignCollectionForChildren();

    Model.Body.AddClass("modal-body");

    Model.AddScript(@<text>
        $('#@id').on('uic-help', ()=>{
            console.log("Modal $('#@id').trigger('uic-open') => Open this modal");
            console.log("Modal $('#@id').trigger('uic-openend') => Open this modal");
            console.log("Modal $('#@id').trigger('uic-close') => Close this modal");
            console.log("Modal $('#@id').trigger('uic-destroy') => Destroy the modal and remove the html");

            console.log("Modal $('#@id').on('uic-showing') => Triggered when the modal is opening");
            console.log("Modal $('#@id').on('uic-opened') => Triggered after the modal has finished opening");

            console.log("Modal $('#@id').on('uic-beforeClose') => Triggered before the modal closes. This can be awaited.");
            console.log("Modal $('#@id').on('uic-closed') => Triggered after the modal has been closed");
        })

        @if(Model.MoveModalToBody){
        <text>
            uic.modal.moveModal($('#@id'), $('#@id').closest('[id]').attr('id'));
        </text>
    }

        $('#@id').modal({
            keyboard: @Json.Serialize(!Model.DisableEscapeKeyToClickout),
            backdrop: @Json.Serialize(Model.DisableCloseOnClickout? "'static'":"true"),
            show: @Json.Serialize(Model.OpenOnLoad)
        });

        $('#@id').on('uic-open', (ev)=>{
            ev.stopPropagation();
            
            $('#@id').modal('show');
            $('#@id').trigger('uic-showing');
        });
        $('#@id').on('uic-close', async (ev)=>{
            ev.stopPropagation();

            if(uic.elementContainsEvent($('#@id'), 'uic-beforeClose')){
                await $('#@id').triggerHandler('uic-beforeClose');
            }
            $('#@id').modal('hide');
        });
        $('#@id').on('uic-destroy', (ev)=>{
            ev.stopPropagation();
            $('#@id').trigger('uic-close');
            $('#@id').modal('dispose');
            $('#@id').remove();
            $('#@(id+"scripts")').remove();
        });

        $('#@id').on('hidden.bs.modal', (ev)=>{
            $('#@id').trigger('uic-closed');
        });
        $('#@id').on('shown.bs.modal', (ev)=>{
            $('#@id').trigger('uic-opened');
        });

        @if(Model.RemoveModalOnClose){
            <text>
            $('#@id').on('uic-closed', ()=>{
                $('#@id').trigger('uic-destroy');
            });
            </text>
        }

        </text>
    );

    string width = "";
    switch (Model.Width)
    {
        case UICModal.ModalSize.Auto:
            width = "auto";
            break;
        case UICModal.ModalSize.Small:
            width = "modal-sm";
            break;
        case UICModal.ModalSize.Normal:
            break;
        case UICModal.ModalSize.Large:
            width = "modal-lg";
            break;
        case UICModal.ModalSize.ExtraLarge:
            width = "modal-xl";
            break;
    }
}

<div @Html.Raw(Model.GetHtmlAttributes())>
    <div class="modal-dialog modal-dialog-centered @width">
        <div class="modal-content">
            @await Model.Header.InvokeAsync(Component)
            @await Model.Body.InvokeAsync(Component)

            @if (Model.Footer != null)
            {
                Model.Footer.AddClass("modal-footer");
                @await Model.Footer.InvokeAsync(Component)
            }
        </div>
        
    </div>
</div>

<div id="@(id+"scripts")">
    @await Model.RenderStylesAndScripts(Component)
</div>
