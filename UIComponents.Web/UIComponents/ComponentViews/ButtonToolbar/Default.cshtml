@using UIComponents.Abstractions.Attributes;
@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Interfaces.Services;
@using UIComponents.Abstractions.Models;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Models;

@using UIComponents.Models.Models;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Texts;
@using UIComponents.Web.Extensions;

@model UICButtonToolbar

@{

    Model.AssignCollectionForChildren();
    Model.AddAttribute("class", "btn-toolbar");
    Model.AddAttribute("role", "toolbar");

    Model.AddAttribute("class", $"dist-{Model.Distance.ToString().ToLower()}");
    
}
@if(Model.Left.AnyHasValue() || Model.Center.AnyHasValue() || Model.Right.AnyHasValue())
{
    <div @Html.Raw(Model.GetHtmlAttributes())>
        @if (Model.Left.AnyHasValue())
        {
            <div class="btn-toolbar-left">
                @foreach (var button in Model.Left)
                {
                    @await button.InvokeAsync(Component)
                }
            </div>
        }

        @if (Model.Center.AnyHasValue())
        {
            <div class="btn-toolbar-center">
                @foreach (var button in Model.Center)
                {
                    @await button.InvokeAsync(Component)
                }
            </div>
        }

        @if (Model.Right.AnyHasValue())
        {
            <div class="btn-toolbar-right">
                @foreach (var button in Model.Right)
                {
                    @await button.InvokeAsync(Component)
                }
            </div>
        }
    </div>
}

@await Model.RenderStylesAndScripts(Component)
