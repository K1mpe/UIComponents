@using UIComponents.Abstractions;
@using UIComponents.Abstractions.Attributes;
@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Interfaces.Services;
@using UIComponents.Abstractions.Models;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Models;

@using UIComponents.Models.Models;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Texts;
@using UIComponents.Web.Extensions;

@model UICForm

@{
    string id = Model.GetId();
    bool isSubForm = !string.IsNullOrEmpty(Model.GetAttribute("formidentifier"));

    Model.AssignCollectionForChildren();

    if(!isSubForm)
        Model.GetAllChildren().Select(x=>x.Component).AddAttribute("formidentifier", $"#{id}");


    
    if(Model.Readonly)
    {
        Model.AddScriptDocReady(
        @<text>
            uic.form.readonly($('#@id'));
        </text>);
    }

    if(Model.SetFocusOnFirstInput)
    {
        Model.AddScriptDocReady(
            @<text>
                setTimeout(() => {
                    $('#@id input, #@id select')[0].focus();
                }, 500);
            </text>
        );
    }

    if (Model.DisablePostOnEnterClick)
    {
        Model.AddScriptDocReady(@<text>
            $('#@id').keydown(ev => {
                if(ev.target.type == 'textarea')
                    return;
                if(ev.keyCode == 13)
                    ev.preventDefault();
            });
            </text>
    );
    }

    if(Model.Submit != null)
    {
        if (Model.Submit is UICActionGetPost getPost)
        {
            if (string.IsNullOrWhiteSpace(getPost.Url))
                Model.AddAttribute("action", Url.Action(getPost.Action, getPost.Controller));
            else
                Model.AddAttribute("action", getPost.Url);

            getPost.GetVariableData = new UICCustom($"uic.getValue($('#{id}'));");
        }

            
        Model.AddScriptDocReady(
            @<text>

            @Html.UICHelp(Model, "uic.form.help")

            $('#@id').off('submit');
            $('#@id').on('submit', function(ev){
                ev.preventDefault();
                ev.stopPropagation();
                $('#@id').triggerHandler('awaitSubmit');
            });
            $('#@id').on('awaitSubmit', async (ev) =>{
                ev.preventDefault();
                ev.stopPropagation();

                if(!await uic.form.warnUserForConflicts($('#@id')))
                    return;

                $('#@id').triggerHandler('uic-beforeSubmit');

                @await Model.Submit.InvokeAsync(Component)

                let myResult = await $('#@id').triggerHandler('uic-afterSubmit', @Html.Raw(Model.Submit.ResultName));

                if(myResult != undefined)
                    return myResult;
                return @Html.Raw(Model.Submit.ResultName);
            } )
            </text>
        );

        
   }
}


@if (isSubForm)
{
    <div @Html.Raw(Model.GetHtmlAttributes())>
        @foreach (var element in Model.Children)
        {
            @await element.InvokeAsync(Component)
        }
    </div>
}
else
{
    <form @Html.Raw(Model.GetHtmlAttributes())>
    
    @foreach(var element in Model.Children)
    {
        @await element.InvokeAsync(Component)
    }
    
    </form>


}

@await Model.RenderStylesAndScripts(Component)
