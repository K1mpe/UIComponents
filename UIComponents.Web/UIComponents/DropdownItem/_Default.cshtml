@model UICDropdownItem
@{
    Model.AssignCollectionForChildren();

    Model.AddAttribute("class", "dropdown-item");
    if (Model.Tooltip != null)
        Model.AddAttribute("title", L.GetResourceValue(Model.Tooltip));

}

@if(Model.OnClick == null)
{
    <li>
        <span @Html.Raw(Model.GetHtmlAttributes())>
            @if (Model.Icon.HasValue())
            {
                @await Model.Icon.InvokeAsync(Component)
            }
            else
            {
                <span class="icon"></span>
            }
            @L.GetResourceValue(Model.Content)
        </span>
    </li>
}
else if (Model.OnClick is UICActionNavigate navigate)
{
    Model.AddAttribute("href", navigate.Href);
    <li>
        <a @Html.Raw(Model.GetHtmlAttributes())>
            @if (Model.Icon.HasValue())
            {
                @await Model.Icon.InvokeAsync(Component)
            }
            else
            {
                <span class="icon"></span>
            }
            @L.GetResourceValue(Model.Content)
        </a>
    </li>
}
else
{
    string itemId = Model.GetOrGenerateId();
    Model.AddAttribute("href", "#");
    Model.AddScript(
        @<text>
            $('#@itemId').click(async function(e){
            e.preventDefault();
            @await Model.OnClick.InvokeAsync(Component)
            });
        </text>);

    <li>
        <a @Html.Raw(Model.GetHtmlAttributes())>
        @if (Model.Icon.HasValue())
        {
            @await Model.Icon.InvokeAsync(Component)
        }
        else
        {
            <span class="icon"></span>
        }
        @L.GetResourceValue(Model.Content)</a>
    </li>
    //Create the script for the click on the dropdown item, and store it for later. This script will be rendered after all dropdown items.
    
                        
}

@await Model.RenderStylesAndScripts(Component)