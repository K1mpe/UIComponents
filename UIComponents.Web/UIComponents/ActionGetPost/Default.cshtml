@using UIComponents.Abstractions.Attributes;
@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Interfaces.ExternalServices;
@using UIComponents.Abstractions.Models;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Models;

@using UIComponents.Models.Models;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Texts;
@using UIComponents.Web.Extensions;

@model UICActionGetPost



let variableContent = null
@if(Model.GetVariableData != null)
{
    <text>
        variableContent = await @await Model.GetVariableData.InvokeAsync(Component)
    </text>
}

let data = $.extend({}, variableContent, @Json.Serialize(Model.Data));

try{
@switch (Model.ActionType)
{
    case UICActionGetPost.ActionTypeEnum.Get:
        <text>
            var @Model.ResultName = await uic.getpost.get('@Url.Action(Model.Action, Model.Controller)', data);
        </text>
        break;
    case UICActionGetPost.ActionTypeEnum.Post:
        <text>
            var @Model.ResultName = await uic.getpost.post('@Url.Action(Model.Action, Model.Controller)', data);
        </text>
        break;
    default:
        throw new NotImplementedException();
}

    @await Model.OnSuccess.InvokeAsync(Component);

} catch(ex){
    @await Model.OnFailed.InvokeAsync(Component);
}

       