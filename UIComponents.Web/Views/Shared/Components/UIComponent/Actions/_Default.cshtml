@using CDCPortal.DA.UIComponents.Abstract;
@model UICActions
@{
    string identifier = Model.GetAttribute("identifier");
    if(string.IsNullOrEmpty(identifier))
        throw new Exception("Identifier for Actions not defined");

    Model.AssignCollectionForChildren();
    foreach(var action in Model.AllActions)
    {
        if(action is UIComponent component)
            component.SetIdentifier(identifier);
    }
    Model.AddScript(
    @<text>
        @if (Model.OnClick.HasValue())
                {
        <text>
            console.log('OnClick', $('@Html.Raw(identifier)'));
            $('@Html.Raw(identifier)').click(async function (args) {
            @await Model.OnClick.InvokeAsync(Component)
            });
        </text>
                }

        @if (Model.OnChange.HasValue())
                {
        <text>
            console.log('OnChange', $('@Html.Raw(identifier)'));
            $('@Html.Raw(identifier)').keydown(async function (args) {
            @await Model.OnChange.InvokeAsync(Component)
            });
        </text>
                }

        @if (Model.AfterChange.HasValue())
                {
        <text>
            console.log('AfterChange', $('@Html.Raw(identifier)'));
            $('@Html.Raw(identifier)').change(async function (args) {
            @await Model.AfterChange.InvokeAsync(Component)
            });
        </text>
                }

        @if (Model.OnFocus.HasValue())
                {
        <text>
            console.log('OnFocus', $('@Html.Raw(identifier)'));
            $('@Html.Raw(identifier)').focus(async function (args) {
            @await Model.OnFocus.InvokeAsync(Component)
            });
        </text>
                }

        @if (Model.OnLoseFocus.HasValue())
                {
        <text>
            console.log('OnLoseFocus', $('@Html.Raw(identifier)'));
            $('@Html.Raw(identifier)').blur(async function (args) {
            @await Model.OnLoseFocus.InvokeAsync(Component)
            });
        </text>
                }
    </text>);
}

@await Model.RenderStylesAndScripts(Component)