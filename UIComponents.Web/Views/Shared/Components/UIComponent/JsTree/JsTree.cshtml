@using CDCPortal.Web.UIComponents.JsTree;
@model JsTree

@{
    Model.AssignCollectionForChildren(Model.Id);

    List<string> plugins = new List<string>();
    if (Model.EnableCheckbox)
        plugins.Add("checkbox");
    if (Model.EnableDragAndDrop)
        plugins.Add("dnd");

    if (Model.SaveState)
        plugins.Add("state");
}

<div id="@Model.Id">

</div>

<link rel="stylesheet" href="~/lib/jstree/dist/themes/default/style.min.css" />
<script src="/lib/jstree/dist/jstree.min.js"></script>

@{
    Model.AddScript(
@<text>
    //console.log('JsTree');
    $('#@Model.Id').jstree({
        'core': {

        check_callback : true,

        expand_selected_onload: false,
            @if (Model.GetData.HasValue())
            {
                <text>
                'data': async function(obj, callback)
                {
                    @await Model.GetData.InvokeAsync(Component)
                }  
                </text>
            }
            else if (Model.JsTreeItems.Any())
            {
            <text>
                'data':[
                @foreach (var item in Model.JsTreeItems)
                {
                    @await item.InvokeAsync(Component)
                }
                ]
            </text>
            }
        },
        
        @if (Model.EnableCheckbox)
        {
            string cascade = "";
            if (Model.CheckboxCascadeUp)
                cascade += "up";
            if (Model.CheckboxCascadeDown)
                cascade += "down";
            <text>
            'checkbox': {
                keep_selected_style : false,
                cascade: '@cascade',
                three_state: @JsonSerializer.Serialize(Model.CheckboxThreeState),
            },
        </text>
        }

        @if (Model.EnableDragAndDrop)
        {
            <text>
            dnd : {
                //Prevents multiple checkboxes to be dragged
                drag_selection: false,
            },
            </text>
        }


        @foreach(var component in Model.CustomComponents)
        {
            @await component.InvokeAsync(Component)
        }

        @if (plugins.Any())
        {
            <text>
            "plugins": [@(Html.Raw(string.Join(", ", plugins.Select(x=> $"\"{x}\""))))]
            </text>
        }
    });

        @if (Model.OnMove.HasValue())
        {
            <text>
            $('#@Model.Id').on('move_node.jstree', function(event, data){
                @await Model.OnMove.InvokeAsync(Component)
            });
            </text>
        }
        
</text>);
}


@await Model.RenderStylesAndScripts(Component, Model.Id)