@using CDCPortal.Web.Validators;



@inject ValidationMessages messages;
@model UICInputSelectlist

@{
    Model.AddAttribute("class", "form-control");


    string id = Model.GetOrGenerateId();
    Model.Actions.SetIdentifier($"#{id}");

    var select = new Select(Model.SelectListItems)
    {
        ShowButtonAdd = Model.AllowButtonAdd,
        EnableSearch = Model.Searchable,
        EntityType = Model.ItemType,
        Placeholder = Model.GetAttribute("placeholder"),
        Readonly = Model.Readonly
    };

    var cl= Model.GetAttribute("class");
    var st = Model.GetAttribute("style");
}

<cdc-select cs="@select" name="@Model.PropertyName" asp-for="@Model.Value" attributes=@Model.Attributes.ToDictionary(x=>x.Key, y=>(object)y.Value)></cdc-select>


<script>

    $(document).ready(function () {

        $('#@id .cdc-select').on('SetValue', function (event, value) {
            console.log('SetValue select', $(this), value);
            $(this).val(value).change();
        });

@if (Model.HasClientSideValidation)
{

    string propertyName = Model.PropertyName;
    if (Model.DisplayName != null)
        propertyName = L.GetResourceValue(Model.DisplayName);

    <text>
        function validateInput(element) {
        var currentValue = element.val();
        var span = element.parent().parent().find('span.field-validation-valid[data-valmsg-for="@Model.PropertyName"]');
        span.text("");


            @if (Model.ValidationRequired)
            {
            <text>
                if (currentValue == null)
                        span.text('@messages.Required(propertyName)');
                </text>
            }
        }

        $('#@id').change(function () {
            validateInput($(this));
        });
        $('#@id').blur(function () {
            validateInput($(this));
        });


    </text>
}

});
</script>


@await Model.Actions.InvokeAsync(Component)