/*#region Visible-child*/


//Takes the first child element with $child-selector if there is not a visible element before
@mixin first-visible($child-selector: '*') {
    :not(:not([hidden], .d-none, :empty, script, style, link, meta, template, [type="hidden"], [style*="display: none"],[style*="visibility: hidden"]) ~ #{$child-selector}) {
        @content;
    }
}

//Takes all children with this selector except the first visible child
@mixin not-first-visible($child-selector: '*') {
    :not([hidden], .d-none, :empty, script, style, link, meta, template, [type="hidden"], [style*="display: none"],[style*="visibility: hidden"]) ~ #{$child-selector} {
        @content;
    }
}

//Takes the last child element with $child-selector if there is no visible element after
@mixin last-visible($child-selector: '*') {
    #{$child-selector}:not(:has(~ :not([hidden], .d-none, :empty, script, style, link, meta, template, [type="hidden"], [style*="display: none"],[style*="visibility: hidden"]))) {
        @content;
    }
}

//Takes all children with this selector except the last visible child
@mixin not-last-visible($child-selector: '*') {
    #{$child-selector}:has(~ :not([hidden], .d-none, :empty, script, style, link, meta, template, [type="hidden"], [style*="display: none"],[style*="visibility: hidden"])) {
        @content;
    }
}

//Only works on the selector if it is the only visible child
@mixin only-child($child-selector: '*') {
    #{$child-selector}:not(:has(~ :not([hidden], .d-none, :empty, script, style, link, meta, template, [type="hidden"], [style*="display: none"], [style*="visibility: hidden"])))
    :not(:has(:not([hidden], .d-none, :empty, script, style, link, meta, template, [type="hidden"], [style*="display: none"], [style*="visibility: hidden"]) ~ #{$child-selector})) {
        @content;
    }
}
//Only works if the selector is the only visible child, css remains on the parent
@mixin has-only-child($child-selector: '*') {
    &:has(> #{$child-selector}:first-child:last-child) {
        @content;
    }
}

//Applies a radius on the left side of the first visible child
@mixin radius-first-left($radius) {
    @include first-visible {
        border-top-left-radius: $radius;
        border-bottom-left-radius: $radius;
    }
}

//Applies a radius on the right side of the last visible child
@mixin radius-last-right($radius) {
    @include last-visible {
        border-top-right-radius: $radius;
        border-bottom-right-radius: $radius;
    }
}

//Applies a radius on the top side of the first visible child
@mixin radius-first-top($radius) {
    @include first-visible {
        border-top-left-radius: $radius;
        border-top-right-radius: $radius;
    }
}

//Applies a radius on the bottom of the last visible child
@mixin radius-last-bottom($radius) {
    @include last-visible {
        border-bottom-left-radius: $radius;
        border-bottom-right-radius: $radius;
    }
}

//Applies a radius on the left of the first child and the right of the last child
@mixin radius-first-last-x($radius) {
    @include radius-first-left($radius);
    @include radius-last-right($radius);
}

//Applies a radius on the top of the first child and the bottom of the last child
@mixin radius-first-last-y($radius) {
    @include radius-first-top($radius);
    @include radius-last-bottom($radius);
}

/*#endregion Visible-child*/


/*#region Tabs*/

//Current tabs is horizontal with tabs (no pills)
//Only apply this mixin on .card-tabs
@mixin is-horizontal-tabs() {
    &:has( > .card-header > .nav-tabs) {
        @content;
    }
}
//Current tabs is horizontal with pills (no tabs)
//Only apply this mixin on .card-tabs
@mixin is-horizontal-pills() {
    &:has(>.card-header .nav-pills) {
        @content;
    }
}
//Current tabs is vertical with tabs (no pills)
//Only apply this mixin on .card-tabs
@mixin is-vertical-tabs() {
    &:has(> .row > .col > .nav-tabs) {
        @content;
    }
}
//Current tabs is vertical with pills (no tabs)
//Only apply this mixin on .card-tabs
@mixin is-vertical-pills() {
    &:has(> .row > .col > .nav-pills) {
        @content;
    }
}

//This selector only has .card-tabs as content
@mixin has-only-tabs() {
    @include has-only-child('.card-tabs') {
        @content;
    }
}

//When on .card-tabs, navigate to vertical headers
@mixin vertical-tabs-headers() {
    > .row > .col-tab-headers .nav-tabs {
        @content
    }
}
//When on .card-tabs, navigate to vertical content
@mixin vertical-tabs-content() {
    > .row > .col-tab-content > .tab-content > .tab-pane {
        @content;
    }
}
//When on .card-tabs, navigate to horizontal headers
@mixin horizontal-tabs-headers() {
    > .card-header > .card-header-tabs {
        @content;
    }
}
//When on .card-tabs, navigate to horizontal content
@mixin horizontal-tabs-content() {
    > .card-body > .tab-content > .tab-pane {
        @content;
    }
}
/*#endregion Tabs*/
