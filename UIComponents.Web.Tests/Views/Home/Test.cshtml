@using UIComponents.Abstractions.Attributes;
@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Interfaces.ExternalServices;
@using UIComponents.Abstractions.Models;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Abstractions;
@using UIComponents.Defaults;
@using UIComponents.Generators.Interfaces;
@using UIComponents.Models;
@using UIComponents.Models.Models;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;

@using UIComponents.Models.Models.Card;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Texts;
@using UIComponents.Web.Extensions;

@inject IUIComponentService uic;

@{
    var testModel = new TestModel();
    var tabs = new UICTabs("blub")
    {
        OnlyRenderSingleContent = false
    }.Add(new UICCard(new Translatable("card1")).AddHeader(out var header))
    .Add(new UICCard(new Translatable("card2")));

    header.AddButton(new UICButton(new Translatable("Button.Test")));
}

@await tabs.InvokeAsync(Component)
@await uic.CreateComponentAsync(testModel, new(){
    ShowCardHeaders = true,
    FormToolbarInCardFooter = true,
    IncludedProperties="Number, Decimal",
    IncludedUndefinedProperties = true,
    SelectListShowAddButtonIfAllowed = true,
}).InvokeAsync(Component)


@{
    var toolbarCard = new UICCard(new Translatable("Card.Toolbars"))
        .Add(new UICButtonToolbar()
            {
                Distance = UIComponents.Abstractions.Enums.ButtonDistance.None
            }
            .AddLeft(new UICButton(new Translatable("GroupL 1")))
            .AddLeft(new UICButton(new Translatable("GroupL 2")))
            .AddLeft(new UICButton(new Translatable("GroupL 3")))
            .AddCenter(new UICButton(new Translatable("GroupC 4")))
            .AddCenter(new UICButton(new Translatable("GroupC 5")))
        )
        .Add(new UICButtonToolbar()
                {
                    Distance = UIComponents.Abstractions.Enums.ButtonDistance.Short
                }
            .AddLeft(new UICButton(new Untranslated("ShortL 1")))
            .AddLeft(new UICButton(new Untranslated("ShortL 2")))
            .AddLeft(new UICButton(new Untranslated("ShortL 3")))
            .AddRight(new UICButton(new Translatable("ShortR 4")))
            .AddRight(new UICButton(new Translatable("ShortR 5")))
        )
        .Add(new UICButtonToolbar()
                {
                    Distance = UIComponents.Abstractions.Enums.ButtonDistance.Medium
                }
            .AddCenter(new UICButton(new Untranslated("MedC 1")))
            .AddCenter(new UICButton(new Untranslated("MedC 2")))
            .AddCenter(new UICButton(new Untranslated("MedC 3")))
        )
        .Add(new UICButtonToolbar()
                {
                    Distance = UIComponents.Abstractions.Enums.ButtonDistance.Long
                }
            .AddLeft(new UICButton(new Untranslated("LongL 1")))
            .AddLeft(new UICButton(new Untranslated("LongL 2")))
            .AddLeft(new UICButton(new Untranslated("LongL 3")))
            .AddCenter(new UICButton(new Translatable("CenterR 4")))
            .AddCenter(new UICButton(new Translatable("CenterR 5")))
        );

}
@await toolbarCard.InvokeAsync(Component)