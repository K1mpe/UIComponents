@using UIComponents.Abstractions.Attributes;
@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Interfaces.Services;
@using UIComponents.Abstractions.Models;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Abstractions;
@using UIComponents.Defaults;
@using UIComponents.Generators.Interfaces;
@using UIComponents.Models;
@using UIComponents.Models.Models;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;

@using UIComponents.Models.Models.Card;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Texts;
@using UIComponents.Models.Models.Tree;
@using UIComponents.Web.Extensions;

@inject IUIComponentGenerator uic;


@{
    var accordion = new UICAccordion()
    {
        AllowOneCardOpen = true
    };


    UICCustom Alert(string text) => new UICCustom($"alert('{text}');");

    accordion.Add(out var dropdowns, new UICCard("Dropdowns"));
    accordion.Add(out var tree, new UICCard("Tree"));

    #region Dropdown
    dropdowns.Add(new UICButtonToolbar(), toolbar =>
    {
        toolbar
            .AddLeft(new UICSpan("Dropdown Without Button"))
            .AddRight(new UICDropdown("Without Button")
                .Add(new UICDropdownItem("Item1"){OnClick = Alert("Item1")})
                .Add(new UICDropdownItem("Item2"){OnClick = Alert("Item2")})
                .Add(new UICDropdownDivider())
                .Add(new UICDropdownItem("Item3"){OnClick = Alert("Item3")})
                .Add(new UICDropdownSubMenu("Dropdown1", new()
                {
                    new UICDropdownItem("SubItem1"),
                    new UICDropdownItem("SubItem2")
                }))
            );

    });

    dropdowns.Add(new UICButtonToolbar(), toolbar =>
    {
        toolbar
            .AddLeft(new UICSpan("SpaceReplacer"));

        List<IUIComponent> buttons = new()
        {
            new UICButton("btn1"){OnClick=Alert("Btn1")},
            new UICButton("btn2"){OnClick=Alert("Btn2")},
            new UICButton("btn3"){OnClick=Alert("Btn3")},
            new UICButton("btn4"){OnClick=Alert("Btn4")},
            new UICButton("btn5"){OnClick=Alert("Btn5")},
            new UICButton("btn6"){OnClick=Alert("Btn6")},
            new UICDropdown("Dropdown", new()
            {
                new UICDropdownItem("Item1"),
                new UICDropdownItem("Item2"),
            })
        };

        toolbar.AddRight(new UICSpaceSelector(buttons, new("Combined buttons")));


    });
    #endregion

    #region Tree
    tree.Add(new UICTree("TreeTest", new List<UICTreeItem>()
    {
        new("Item1"),
        new("Item2"){Icon = UICIcon.Add().Icon},
        new UICTreeItem("Item3")
            .Add(new("subItem1"))
            .Add(new("subItem2"))
    })
    {
        EnableCheckbox = true,
        EnableDragAndDrop = true
    });

    tree.Add(new UICTree("TreeAjax", new UICTreeLoadAjaxData(new(UICActionGetPost.ActionTypeEnum.Post, "home", "jsTreeItems"), "abc")));
    #endregion

    #region Toolbars
    accordion.Add(new UICCard(new Translatable("Card.Toolbars"))
        .Add(new UICButtonToolbar()
            {
                Distance = UIComponents.Abstractions.Enums.ButtonDistance.None
            }
            .AddLeft(new UICButton(new Translatable("GroupL 1")))
            .AddLeft(new UICButton(new Translatable("GroupL 2")))
            .AddLeft(new UICButton(new Translatable("GroupL 3")))
            .AddCenter(new UICButton(new Translatable("GroupC 4")))
            .AddCenter(new UICButton(new Translatable("GroupC 5")))
        )
        .Add(new UICButtonToolbar()
                {
                    Distance = UIComponents.Abstractions.Enums.ButtonDistance.Short
                }
            .AddLeft(new UICButton(new Untranslated("ShortL 1")))
            .AddLeft(new UICButton(new Untranslated("ShortL 2")))
            .AddLeft(new UICButton(new Untranslated("ShortL 3")))
            .AddRight(new UICButton(new Translatable("ShortR 4")))
            .AddRight(new UICButton(new Translatable("ShortR 5")))
        )
        .Add(new UICButtonToolbar()
                {
                    Distance = UIComponents.Abstractions.Enums.ButtonDistance.Medium
                }
            .AddCenter(new UICButton(new Untranslated("MedC 1")))
            .AddCenter(new UICButton(new Untranslated("MedC 2")))
            .AddCenter(new UICButton(new Untranslated("MedC 3")))
        )
        .Add(new UICButtonToolbar()
                {
                    Distance = UIComponents.Abstractions.Enums.ButtonDistance.Long
                }
            .AddLeft(new UICButton(new Untranslated("LongL 1")))
            .AddLeft(new UICButton(new Untranslated("LongL 2")))
            .AddLeft(new UICButton(new Untranslated("LongL 3")))
            .AddCenter(new UICButton(new Translatable("CenterR 4")))
            .AddCenter(new UICButton(new Translatable("CenterR 5")))
        ));
    #endregion

    #region Taghelper
    accordion.Add(new UICCard("CustomTaghelper").Add(out var taghelper, new UICCustom()));
    #endregion
}
<uic-custom uic="taghelper">
    <h1>Taghelper</h1>
</uic-custom>

@await accordion.InvokeAsync(Component)