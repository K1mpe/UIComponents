@using UIComponents.Abstractions;
@using UIComponents.Abstractions.DataTypes.RecurringDates.Selectors
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Abstractions.Interfaces.Services
@using UIComponents.Abstractions.Models
@using UIComponents.Generators.Helpers
@using UIComponents.Generators.Interfaces;
@using UIComponents.Models.Models.Buttons
@using UIComponents.Models.Models.Card;
@using UIComponents.Models.Models;
@using UIComponents.Models.Extensions;
@using UIComponents.Models.Models.Dropdown
@using UIComponents.Models.Models.Graphs.TimeLineGraph
@using UIComponents.Models.Models.Icons
@using UIComponents.Models.Models.Inputs
@using UIComponents.Models.Models.Questions
@using UIComponents.Models.Models.Texts
@using UIComponents.Web.Extensions;
@using UIComponents.Web.Tests.Factory
@using UIComponents.Web.Tests.Services

@{
    ViewData["Title"] = "Home Page";
}
@inject TestService testService
@inject IUIComponentGenerator UIC
@inject IUICQuestionService _questionService;
@{
    var testModel = new TestModel();
    testModel.RecurringDate = new();
    testModel.RecurringDate.Included.Add(new()
    {
        EndDate = DateOnly.FromDateTime(DateTime.Today.AddDays(5)),
    Pattern = new RecurringWeekly()
        {
            Monday = true,
            Tuesday = true,
            Wednesday = true,
        }

    });
    testModel.RecurringDate.Excluded.Add(new()
    {
        Pattern = new RecurringMonthly()
        {
            Instance = RecurringMonthly.MonthlyInstance.First,
            RecurringStyle = 1,
        }
    });
    var tabs = new UICTabs("TestTabs")
            {
                OnlyRenderSingleContent = true
            }.AddCss("height", "600px")
        .Add(out var formTabs, new UICTabs("FormTabs")
                {
                    Header = new UICCardHeader("Forms"),
                    Renderer = UICCardWithTabsRenderer.Vertical
                }
        .Add(out var createTab,new UICCard(new Translatable("Card.Create"))
            .Add(await UIC.CreateComponentAsync(testModel, new UICOptions()
                    {
                        ReplaceSaveButtonWithCreateButton = true,
                        ShowEditButton = false,
                //IncludedProperties = "teststring, number, decimal, checkbox, enum, recurringDate,SubClass",
                        PostForm = new UICActionPost("home", "post"),
                        SelectlistAddEmptyItem = false,
                        ToolbarPosition = ToolbarPosition.BelowForm,
                    })).Add(await UIC.CreateComponentAsync(testModel, x => x.TestString)))
        .Add(new UICCard(new Translatable("Card.Edit"))
            .Add(new UICSidePanel(await UIC.CreateComponentAsync(new TestModel(), new(){
                ToolbarPosition = ToolbarPosition.AboveForm,
                ShowDeleteButton = true,
                PostFullModelOnDelete = true,
                ButtonOrder = "edit, delete, cancel",
                DeleteButtonPosition = ButtonPosition.Left
            }), new UICGroup()
                    .AddAttribute("width", "300px")
                    .AddAttribute("height", "100%"))), sidePanel =>
                    {
                        var color = sidePanel.FindInputGroupByPropertyName(nameof(TestModel.Color));
                        color.PrependInput.Add(new UICIcon("fas fa-square"));
                        color.AppendInput.Add(new UICSpan("blub"));

                        sidePanel.FindInputGroupByPropertyName(nameof(TestModel.TestString)).PrependInput.Add(new UICIcon("fas fa-user"));
                        sidePanel.FindInputGroupByPropertyName(nameof(TestModel.Enum)).PrependInput.Add(new UICIcon("fas fa-user"));
                    })

        .Add(new UICCard(new Translatable("Card.Partial"))
            .AddPartial("Home", "test")
            ))
    .Add(new UICCard(new Translatable("Card.Partial"))
            .AddPartial("Home", "test"));

    formTabs.Add(new UICCard("Card.SelectList").AddPartial("home", "selectlist"));
    tabs.FindInputGroupByPropertyName(nameof(TestModel.Enum), (input)=>{
        input.AppendInput.Add(new UICButton() { PrependButtonIcon = UICIcon.Add() });
    });
    formTabs.Add(new UICCard("Subclass").AddPartial("Home", "TestSubClass"));


    tabs.Add(new UICCard(new UICCardHeader("Chart")).Add(new UICTimeLineGraph(), graph =>
    {
        graph.Start = DateTime.Now.AddMinutes(-1);
        graph.Add(new("Graph1", "blub", "/home/GetTimelineChartData") { CacheData = true, RemoveCacheOnZoom = true, AdditionalPostData = new { UserId = 1 }, Fill = true, Stepped = true });
        graph.Add(new("Graph2", "foo", "/home/GetTimelineChartData"){CacheData = true, RemoveCacheOnZoom = true, Tension=0.5});
        graph.MinStart = DateTime.Now.AddDays(-1);
        graph.MaxEnd = DateTime.Now.AddDays(2);
    }));

    tabs.Add(new UICCard("FileExplorer").AddPartial("home", "files"));

    var factoryComponent = new UICFactory<TestComponentFactory>(f => f.CreateComponentAsync(2));
    factoryComponent = new UICFactory<TestComponentFactory>("/Views/Home/TestViewModelFromFactory", async f => await f.CreateViewModelAsync(2));
    tabs.Add(new UICCard("factoryComponent").Add(factoryComponent));







    var createButton = await UIC.CreateButtonAsync(UICGeneratorPropertyCallType.ButtonSave, new UICOptions() { ReplaceSaveButtonWithCreateButton = true });
    var editButton = await UIC.CreateButtonAsync(UICGeneratorPropertyCallType.ButtonEditReadonly);
    var deleteButton = await UIC.CreateButtonAsync(UICGeneratorPropertyCallType.ButtonDelete, b=> b.Color = new UICColor("Danger"));

    createTab.TryFindFirstOfType<UICForm>(f=>
        f.Add(new UICGroup()
            .AddClass("test-custom-buttons")
            .Add(createButton)
            .Add(editButton)
            .Add(deleteButton)));

    //var counter = await UIC.CreateComponentAsync(testService, x=>x.SecondCounter);


    
}



@await tabs.InvokeAsync(Component)
@* @await counter.InvokeAsync(Component) *@


    <script>
        $(document).ready(()=>{
            setTimeout(async()=>{
                uic.getpost.post('/home/TestQuestion');
            },1000);
        })
    </script>