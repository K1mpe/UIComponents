@using UIComponents.Abstractions;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Generators.Interfaces;
@using UIComponents.Models.Models.Buttons
@using UIComponents.Models.Models.Card;
@using UIComponents.Models.Models;
@using UIComponents.Models.Extensions;
@using UIComponents.Models.Models.Icons
@using UIComponents.Web.Extensions;
@{
    ViewData["Title"] = "Home Page";
}

@inject IUIComponentService UIC
@{
    var testModel = new TestModel();
    var tabs = new UICTabs("TestTabs")
    {
        OnlyRenderSingleContent = true
    }
        .Add(new UICTabs("FormTabs")
        {
            Header = new UICCardHeader("Forms"),
            Renderer = UICCardWithTabsRenderer.VerticalTab
        }
        .Add(new UICCard(new Translatable("Card.Create"))
            .Add(await UIC.CreateComponentAsync(new TestModel(){Enum= TestEnum.Two}, new()
            {
                ReplaceSaveButtonWithCreateButton = true,
                ShowEditButton = false,
                IncludedProperties = "teststring, number, decimal, checkbox, enum"
            })).Add(await UIC.CreateComponentAsync(testModel, x=>x.TestString)))
        .Add(new UICCard(new Translatable("Card.Edit"))
            .Add(new UICSidePanel(await UIC.CreateComponentAsync(new TestModel()), new UICGroup()
                    .AddAttribute("width", "300px")
                    .AddAttribute("height", "100%"))))

        .Add(new UICCard(new Translatable("Card.Partial"))
            .AddPartial("Home", "test")
            ))
    .Add(new UICCard(new Translatable("Card.Partial"))
            .AddPartial("Home", "test"));

    tabs.FindInputGroupByPropertyName(nameof(TestModel.Enum), (input)=>{
        input.AppendInput.Add(new UICButton() { PrependButtonIcon = UICIcon.Add() });
    });
}

@await tabs.InvokeAsync(Component)