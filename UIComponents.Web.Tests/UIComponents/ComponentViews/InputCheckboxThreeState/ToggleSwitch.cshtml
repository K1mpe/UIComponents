@using UIComponents.Abstractions;
@using UIComponents.Abstractions.Attributes;
@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Interfaces.Services;
@using UIComponents.Abstractions.Models;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Defaults;
@using UIComponents.Models;
@using UIComponents.Models.Models;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Texts;
@using UIComponents.Web.Extensions;

@model UICInputCheckboxThreeState

@{

    string id = Model.GetId();
    if (Model.Actions.HasValue())
    {
        Model.Actions.SetIdentifier($"#{id}");
    }

    Model.AddAttribute("data-value", Model.Value?.ToString().ToLower() ?? "null");


    Model.AddAttribute("class", "three-state-checkbox");
    Model.AddAttribute("class", "custom-control-input");
}

<div class="custom-control custom-switch @(string.IsNullOrEmpty(Model.Color?.ToLower())?"":$"icheck-{Model.Color}")">
    <input type="checkbox" @Html.Raw(Model.GetHtmlAttributes()) />
    <label class="custom-control-label" for="@id"></label>
</div>
