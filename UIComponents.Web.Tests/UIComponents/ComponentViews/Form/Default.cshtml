@using UIComponents.Abstractions.Attributes;
@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Interfaces.Services;
@using UIComponents.Abstractions.Models;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Models;

@using UIComponents.Models.Models;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Texts;
@using UIComponents.Web.Extensions;

@model UICForm

@{
    string id = Model.GetId();
    bool isSubForm = !string.IsNullOrEmpty(Model.GetAttribute("formidentifier"));

    Model.AssignCollectionForChildren();

    if(!isSubForm)
        Model.GetAllChildren().Select(x=>x.Component).AddAttribute("formidentifier", $"#{id}");

}


@if (isSubForm)
{
    <div @Html.Raw(Model.GetHtmlAttributes())>
        @foreach (var element in Model.Children)
        {
            @await element.InvokeAsync(Component)
        }
    </div>
}
else
{
    <form id="@id">
    
    @foreach(var element in Model.Children)
    {
        @await element.InvokeAsync(Component)
    }
    
    </form>


    @if(Model.Readonly)
    {
        Model.AddScript(
    @<text>
        uic.form.readonly($('#@id'));
    </text>);
    }

    @if(Model.SetFocusOnFirstInput)
    {
        Model.AddScript(
    @<text>
        setTimeout(() => {
            $('#@id input, #@id select')[0].focus();
        }, 500);
    </text>);
    }

    @if(Model.Submit != null)
    {
        if (Model.Submit is UICActionGetPost getPost)
            getPost.GetVariableData = new UICCustom($"uic.getValue($('#{id}'));");
        Model.AddScript(
            @<text>

            $('#@id').on('uic-help', ()=>{
                console.log("Form $('#@id').trigger('submit') => Submit this form");
                console.log("Form await $('#@id').triggerHandler('awaitSubmit') => Submit this form and return the result");
            });

            $('#@id').off('submit');
            $('#@id').on('submit', function(ev){
                ev.preventDefault();
                ev.stopPropagation();
                $('#@id').triggerHandler('awaitSubmit');
            });
            $('#@id').on('awaitSubmit', async (ev) =>{
                ev.preventDefault();
                ev.stopPropagation();
                
                @await Model.Submit.InvokeAsync(Component)
                return @Html.Raw(Model.Submit.ResultName);
            } )
            </text>
        );

        
   }
}

@await Model.RenderStylesAndScripts(Component)
