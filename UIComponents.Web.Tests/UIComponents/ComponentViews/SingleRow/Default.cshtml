@using UIComponents.Abstractions;
@using UIComponents.Abstractions.Attributes;
@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Interfaces.Services;
@using UIComponents.Abstractions.Models;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Models;
@using UIComponents.Models.Models;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Texts;
@using UIComponents.Web.Extensions;

@model UICSingleRow

@{
    string id = Model.GetId();
    Model.AssignCollectionForChildren();
    Model.AddClass("single-row");
    if(Model.Columns.HasValue)
        Model.AddCss("--columns", Model.Columns.ToString());
    if (!string.IsNullOrWhiteSpace(Model.MinLabelWidth))
        Model.AddCss("--min-label-width", Model.MinLabelWidth);
    if (!string.IsNullOrWhiteSpace(Model.MaxLabelWidth))
        Model.AddCss("--max-label-width", Model.MaxLabelWidth);
    if (!string.IsNullOrWhiteSpace(Model.MinInputWidth))
        Model.AddCss("--min-input-width", Model.MinInputWidth);
    if (!string.IsNullOrWhiteSpace(Model.MaxInputWidth))
        Model.AddCss("--max-input-width", Model.MaxInputWidth);
    if (!string.IsNullOrWhiteSpace(Model.MarginBetweenRows))
        Model.AddCss("--margin-between-rows", Model.MarginBetweenRows);
    if (!string.IsNullOrWhiteSpace(Model.MarginBetweenColumns))
        Model.AddCss("--margin-between-cols", Model.MarginBetweenColumns);

    List<Type> SupportedTypes = new() { typeof(UICInputGroup) };


    foreach (var child in Model.Components)
    {
        if (child is IUISingleRowSupport singleRowSupport)
        {
            singleRowSupport.TransformToSingleRow();
        }
    }


    bool lastHadSupport = false;

}



<div @Html.Raw(Model.GetHtmlAttributes())>
    @foreach (var element in Model.Components)
    {
        if (element == null)
            continue;
        if (element is UIComponent component)
        {
            if (!component.Render)
                continue;
        }
        bool hasSingleRowSupport = (element is IUISingleRowSupport supportsSingleRow && supportsSingleRow.RendersInSingleRow());

        if (!lastHadSupport && hasSingleRowSupport)
        {
            @Html.Raw("<div class=\"singlerow-groups\">")
        }
        else if (lastHadSupport && !hasSingleRowSupport)
        {
            @Html.Raw("</div>")
        }
        lastHadSupport = hasSingleRowSupport;
        @await element.InvokeAsync(Component)
    }
    @if (lastHadSupport)
        @Html.Raw("</div>")


</div>

@await Model.RenderStylesAndScripts(Component)