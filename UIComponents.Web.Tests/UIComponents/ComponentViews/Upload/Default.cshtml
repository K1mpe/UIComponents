@using UIComponents.Abstractions;
@using UIComponents.Abstractions.Attributes;
@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Models;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Abstractions.Interfaces.Services;
@using UIComponents.Defaults;
@using UIComponents.Models;
@using UIComponents.Models.Models;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;
@using UIComponents.Models.Models.Card;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Texts;
@using UIComponents.Web.Extensions;

@inject IUICLanguageService L
@model UICUpload

@{
    string id = Model.GetId();
}

<link rel="stylesheet" href="@Html.JsEncode(UIComponents.Defaults.Models.UICUpload.DropzoneCss)" />

<form id="@id" class="form" action="#" method="post" enctype="multipart/form-data">
    <!--begin::Input group-->
    <div class="fv-row">
        <!--begin::Dropzone-->
        <div class="uic dropzone">
            <!--begin::Message-->
            <div class="dz-message needsclick">
                <i class="ki-duotone ki-file-up fs-3x text-primary"><span class="path1"></span><span class="path2"></span></i>

                <!--begin::Info-->
                <div class="ms-4">
                    <h3 class="fs-5 fw-bold text-gray-900 mb-1">@await Html.TranslateHtml(L, Model.Text, null)</h3>
                    @if (Model.DisplayFileCountMessage)
                    {
                        <span class="fs-7 fw-semibold text-gray-400">@await Html.TranslateHtml(L, TranslationDefaults.FileUploadMaxFiles(Model.MaxFileCount))</span>
                    }

                </div>
                <!--end::Info-->
            </div>
        </div>
        <!--end::Dropzone-->
    </div>
    <!--end::Input group-->
</form>


<script src="@Html.JsEncode(UIComponents.Defaults.Models.UICUpload.DropzoneScript)"></script>
<script>
    Dropzone.autoDiscover = false;
    $(document).ready(function(){
        console.log('upload script');
        var myDropzone = new Dropzone("#@id .dropzone", {
            url: @Json.Serialize(Model.PostUrl), // Set the url for your upload script location
            paramName: "files", // The name that will be used to transfer the file

    @if (!Model.AllowChunking)
    {
            <text>
                uploadMultiple: @Json.Serialize(Model.MaxFileCount > 1),
            </text>
    }


            maxFiles: @Model.MaxFileCount,
            maxFilesize: @Model.MaxFileSize, // MB
    @if (!string.IsNullOrEmpty(Model.AcceptedFiles))
    {
            <text>
                acceptedFiles: @Json.Serialize(Model.AcceptedFiles),
            </text>
    }

    @Html.Conditional(Model.ParallelUploads > 0, $"parallelUploads: {Model.ParallelUploads},")
    @if (Model.AllowChunking)
    {
            <text>
                chunking: true,
                chunkSize: @Json.Serialize(Model.ChunkSizeMB * 1024 * 1024),
                parallelChunkUploads: false,
                retryChunks: true,
                retryChunksLimit: 3,
                addRemoveLinks: true,
            </text>
    }
    init: function(){
        console.log('dropzone script');
            @if (Model.PostData.Any())
            {
                    <text>
                    this.on("sending", function(file, xhr, formData){
                        @Model.PostData.FlattenDictionary((key, value) => $"formData.append('{key}', '{value}');");

                });
                    </text>
            }
            @if (Model.OnSuccess.HasValue())
            {
                    <text>
                    this.on("complete", async function(file){
                        @await Model.OnSuccess.InvokeAsync(Component)

                        $('#@id').trigger('uic-upload-complete', file);
                    });
                    </text>
            }
            @if (Model.OnSuccessAll.HasValue())
            {
                    <text>
                    let hasErrors = false;
                    this.on("queuecomplete", async function(){
                        if(hasErrors)
                            return;
                        @await Model.OnSuccessAll.InvokeAsync(Component)
                        $('#@id').trigger('uic-upload-complete-all', file);
                    });
                    this.on("error", async function(file, message){
                        hasErrors = true;

                        @await Model.OnError.InvokeAsync(Component)

                        $('#@id').trigger('uic-upload-error', {file, message});

                        message = await uic.translation.translate(message?.Notification?.Message || message);
                        $(file.previewElement).find('.dz-error-message').text(message);

                    });
                    </text>
            }
            else if (Model.OnError.HasValue())
            {
                    <text>
                    this.on("error", async function(file, message){
                        @await Model.OnError.InvokeAsync(Component)

                        $('#@id').trigger('uic-upload-error', {file, message});
                        return message;
                    })
                    </text>
            }
        },

        });
    });
</script>