@using UIComponents.Abstractions;
@using UIComponents.Abstractions.Attributes;
@using UIComponents.Abstractions.Enums
@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Interfaces.Services;
@using UIComponents.Abstractions.Models;
@using UIComponents.Abstractions.Models.FileExplorer;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Defaults;
@using UIComponents.Models;
@using UIComponents.Models.Models;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;
@using UIComponents.Models.Models.Card;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Tables;
@using UIComponents.Models.Models.Tables.TableColumns;
@using UIComponents.Models.Models.Texts;
@using UIComponents.Web.Extensions;
@model List<RelativePathModel>

@{
    var serialised = Json.Serialize(Model);
}
<div id="progressBar">
    <div id="progress"></div>
</div>
<button id="downloadBtn">Download</button>

<script>
    document.getElementById('downloadBtn').addEventListener('click', async () => {
        const response = await fetch('/fileexplorer/downloadprogress', {
            method: 'GET',
            data: '@serialised'
            // Specify other fetch options as needed
        });

        if (!response.ok) {
            console.error('Download failed:', response.statusText);
            return;
        }

        const contentLength = response.headers.get('Content-Length');
        const total = parseInt(contentLength, 10);
        let loaded = 0;

        const reader = response.body.getReader();
        const writer = new FileWriter(); // Assuming you have some file writing logic

        const progressBar = document.getElementById('progress');
        const progressContainer = document.getElementById('progressBar');

        while (true) {
            const { done, value } = await reader.read();
            if (done) break;

            // Write the data chunk to a file or blob
            // For demonstration, you might just log it or handle it as needed
            loaded += value.length;
            const percentComplete = (loaded / total) * 100;
            progressBar.style.width = `${percentComplete}%`;
        }

        console.log('Download complete!');
    });
</script>