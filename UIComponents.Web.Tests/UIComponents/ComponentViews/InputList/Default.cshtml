@using UIComponents.Abstractions.Attributes;
@using UIComponents.Abstractions.Enums
@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Interfaces.Services;
@using UIComponents.Abstractions.Models;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Defaults;
@using UIComponents.Models;
@using UIComponents.Models.Helpers
@using UIComponents.Models.Models;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;
@using UIComponents.Models.Models.Card;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Texts;
@using UIComponents.Web.Extensions;

@model UICInputList
@{
    string id = Model.GetId();
    string indexRef = id.Length > 7 ? id.Substring(3, 7) : "l"+Guid.NewGuid().ToString("n").Substring(0, 3);
    Model.SingleInstanceInput.AddAttribute("data-list-item", indexRef);


    if(Model.AddButton.HasValue() && !Model.AddButton.OnClick.HasValue())
    {
        Model.AddButton.OnClick = Model.TriggerAddInstance();
    }
    Model.MoveUpButton.AddClass("uic-btn-move-up");
    Model.MoveDownButton.AddClass("uic-btn-move-down");
    Model.RemoveButton.AddClass("uic-btn-delete-instance");

    Model.AddScript(
        @<text>
        $('#@id').on('uic-help', ()=>{
            console.log("ListInput $('#@id').trigger('uic-setValue', value) => Sets the value of all list items");
            console.log("ListInput $('#@id').trigger('uic-setValue-index', [value, index]) => Sets the value of the item at this index");
            console.log("ListInput $('#@id').trigger('uic-getValue') => Get the value of all list items");
            console.log("ListInput $('#@id').trigger('uic-getValue-index, index') => Get the value of the item at this index");
            console.log("ListInput $('#@id').trigger('uic-clearValues') => Empty all listitems");
            console.log("ListInput $('#@id').trigger('uic-add', value) => Add a new item to the list, value is optional");
            console.log("ListInput $('#@id').trigger('uic-remove', index) => Remove the item at this index");

            console.log("ListInput $('#@id').on('uic-change') => Something has changed in the list");
        });
        $('#@id').on('uic-help',  '> .input-instances > .input-instance', ()=>{
            console.log("ListInput-Item $().trigger('uic-remove') => Remove this item");
            console.log("ListInput-Item $().trigger('uic-move-up') => Move this item up");
            console.log("ListInput-Item $().trigger('uic-move-down') => Move this item down");
        })

        function triggerChange(){
            $('#@id').trigger('uic-change');
            $('#@id').change();
        }
        $('#@id').on('uic-getValue', ()=>{
            let results = [];

            $('#@id > .input-instances [data-list-item="@indexRef"][name="@Model.PropertyName"]').each((index, item)=>{
                let value = uic.getValue($(item));
                results.push(value);
            });
            return results;
        });

        $('#@id').on('uic-getValue-index', (ev, index)=>{
            ev.stopPropagation();
            return uic.getValue($('#@id .input-instances .input-instance')[index]);
        });

        $('#@id').on('uic-setValue', (ev, ...values) => {
            let inputList = $('#@id');
            let instances = $('#@id .input-instances .input-instance');
            for(let i=0; i< values.length; i++){
                if(instances.length > i){
                    $('#@id').trigger('uic-setValue-index', [values[i], i]);
                } else{
                    $('#@id').trigger('uic-add', values[i]);
                }
            }
            instances.each((index, item) =>{
                if(index > values.length)
                    $(item).trigger('uic-remove');
            });
        });

        $('#@id').on('uic-setValue-index', (ev, value, index) =>{
            ev.stopPropagation();
            uic.setValue($('#@id .input-instances .input-instance')[index], value);
            triggerChange();
        });

        $('#@id').on('uic-clearValues', (ev)=>{
            ev.stopPropagation();
            $('#@id > .input-instances').html('');
            triggerChange();
        });

        $('#@id').on('uic-add', (ev, value)=>{
            let instanceList = $('#@id > .input-instances');
            let currentChildCount = instanceList.children().length;
            instanceList.append($('#@id > .input-template > .input-instance').clone());
            if(value != undefined)
                $('#@id').trigger('uic-setValue-index', [value, currentChildCount]);
                
            triggerChange();
        });

        $('#@id').on('uic-remove', (ev, index) =>{
            ev.stopPropagation();
            let instance = $('#@id > .input-instances .input-instance')[index];
            $(instance).trigger('uic-remove');
            triggerChange();
        });
        $('#@id').on('click', '.uic-btn-delete-instance', (ev) => $(ev.target).trigger('uic-remove'));
        $('#@id').on('.input-instances > .input-instance').on('uic-remove', (ev)=>{
            ev.stopPropagation();
            $(ev.target).closest('.input-instance').remove();
        });
        $('#@id').on('click', '.uic-btn-move-up', (ev) => $(ev.target).trigger('uic-moveUp'));
        $('#@id').on('click', '.uic-btn-move-down', (ev) => $(ev.target).trigger('uic-moveDown'));
        $('#@id').on('uic-moveUp', '> .input-instances > .input-instance', (ev) =>{
            ev.stopPropagation();
            let el = $(ev.target).closest('.input-instance');
            $(el).prev().before($(el));
            triggerChange();
        });
        $('#@id').on('uic-moveDown', '> .input-instances > .input-instance', (ev) => {
            ev.stopPropagation();
            let el = $(ev.target).closest('.input-instance');
            $(el).next().after($(el));
            triggerChange();
        });

        $('#@id').on('uic-change', ()=>{
            setButtonDirection();
        });
        function setButtonDirection(){
            $('#@id .input-instances > .input-instance').each((index, item)=>{
                let buttons = $(item).find('> .instance-buttons');
                buttons.removeClass('vertical');
                let buttonCount = buttons.children().length;
                let input = $($(item).children()[0])
                input.css('max-height', '1px');
                let buttonHeight = buttons.height();
                input.css('max-height', '');

                let inputHeight = input.height();
                if(inputHeight >= (buttonCount * buttonHeight))
                    buttons.addClass('vertical');
            })
        }
    @foreach(var value in Model.Value)
    {
        <text>
            console.log('adding', @Json.Serialize(value));
            $('#@id').trigger('uic-add', @Json.Serialize(value));
        </text>
    }
        </text>);
}

<div @Html.Raw(Model.GetHtmlAttributes())>
    <div class="input-instances">
    </div>
    <div class="input-template d-none">
        <div class="input-instance">
            @await Model.SingleInstanceInput.InvokeAsync(Component)
            
            <div class="instance-buttons">
                @if (Model.ShowMoveButtons)
                {
                    @await Model.MoveUpButton.InvokeAsync(Component)
                    @await Model.MoveDownButton.InvokeAsync(Component)
                }
                @await Model.RemoveButton.InvokeAsync(Component)
            </div> 
        </div>
    </div>
    @await Model.AddButton.InvokeAsync(Component)
</div>