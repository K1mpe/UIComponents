@using UIComponents.Abstractions;
@using UIComponents.Abstractions.Attributes;
@using UIComponents.Abstractions.Enums
@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Interfaces.Services;
@using UIComponents.Abstractions.Models;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Defaults;
@using UIComponents.Models;
@using UIComponents.Models.Models;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;
@using UIComponents.Models.Models.Card;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Texts;
@using UIComponents.Web.Extensions;
@using static UIComponents.Models.Models.Actions.UICActionDelayedAction
@model UICActionDelayedAction
@{
    string id = Guid.NewGuid().ToString("n").Substring(0, 6);
    if (!Model.Action.HasValue())
        return;
}

@if (Model.Miliseconds <= 0)
{
    @await Model.Action.InvokeAsync(Component)
}
else
{
    switch (Model.DelayType)
    {
        case DelayedActionType.Debounce:
            <text>
                uic.delayedAction.debounce('@id', async()=>{
                    @await Model.Action.InvokeAsync(Component)
                }, @Json.Serialize(Model.Miliseconds));
            </text>
            break;

        case DelayedActionType.Delay:
            <text>
                uic.delayedAction.delayed('@id', async()=>{
                    @await Model.Action.InvokeAsync(Component)
                    }, @Json.Serialize(Model.Miliseconds));
            </text>
            break;
        case DelayedActionType.Throttle:
            <text>
                uic.delayedAction.throttle('@id', async()=>{
                    @await Model.Action.InvokeAsync(Component)
                    }, @Json.Serialize(Model.Miliseconds));
            </text>
            break;
    }
}
