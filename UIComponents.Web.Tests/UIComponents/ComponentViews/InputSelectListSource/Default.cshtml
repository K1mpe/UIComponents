@using UIComponents.Abstractions.Attributes;
@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Interfaces.Services;
@using UIComponents.Abstractions.Models;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Defaults;
@using UIComponents.Models;
@using UIComponents.Models.Models;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Texts;
@using UIComponents.Web.Extensions;

@inject IUICLanguageService L

@model UICInputSelectListSource

@{

    var id= Model.InputSelectList.GetId();

    if(Model.GetSelectListItems != null)
    {
    <text>

        $('#@id').on('uic-help', function(){
            console.log("$('#@id').trigger('uic-reload')    Reload all selectlistitems");
            console.log("$('#@id').on('uic-before-load', ()=>{...})  Triggered before the selectlist starts loading");
            console.log("$('#@id').on('uic-loaded', ()=>{...})  Triggered after the selectlistitems are finished loading");
        });


        $('#@id').on('uic-reload', async function(ev){
            ev.stopPropagation();
            let element = $('#@id');
            element.triggerHandler('uic-before-load');
            @await Model.GetSelectListItems.InvokeAsync(Component);

            let selectListItems = @Html.Raw(Model.GetSelectListItems.ResultName);

            
            let currentValue = uic.getValue(element) || @Html.JsEncode(Model.InputSelectList.Value?.ToString()??string.Empty, "'");
            @if(Model.MapToSelectListItems != null)
            {
                <text>
                    selectListItems = await Model.MapToSelectListItems.InvokeAsync(Component);
                </text>
            }

            
        
            element.children().remove();

            if(selectListItems == undefined || selectListItems.length == 0 || selectListItems == false){
                element.append($('<option>', {text: @await Html.TranslateJs(L, Model.InputSelectList.NoItemsText)}));
            } else{
                @switch (Model.Sorting)
        {
        case UICInputSelectListSource.ItemSorting.NoSorting:
        break;
        case UICInputSelectListSource.ItemSorting.Text_Ascending:
            <text>
                selectListItems = selectListItems.sort((a, b) =>{
                let textA = a.Text?.toUpperCase() || '';
                let textB = b.Text?.toUpperCase() || '';
                if(textA > textB)
                return 1;
                else if(textB > textA)
                return -1;
                return 0;
                });
            </text>
        break;
        case UICInputSelectListSource.ItemSorting.Text_Decending:
            <text>
                selectListItems = selectListItems.sort((a, b) =>{
                let textA = a.Text?.toUpperCase() || '';
                let textB = b.Text?.toUpperCase() || '';
                if(textA > textB)
                return -1;
                else if(textB > textA)
                return 1;
                return 0;
                });
            </text>
        break;
        case UICInputSelectListSource.ItemSorting.Value_Ascending:
            <text>
                selectListItems = selectListItems.sort((a, b) =>{
                let valueA = a.Value?.toUpperCase() || '';
                let valueB = b.Value?.toUpperCase() || '';
                if(valueA > valueB)
                return 1;
                else if(valueB > valueA)
                return -1;
                return 0;
                });
            </text>
        break;
        case UICInputSelectListSource.ItemSorting.Value_Decending:
            <text>
                selectListItems = selectListItems.sort((a, b) =>{
                let valueA = a.Value?.toUpperCase() || '';
                let valueB = b.Value?.toUpperCase() || '';
                if(valueA > valueB)
                return -1;
                else if(valueB > valueA)
                return 1;
                return 0;
                });
            </text>
        break;
        default:
            throw new NotImplementedException();
        }

                selectListItems.forEach((item)=>{
                    if(item.Render === false)
                        return;

                    let option = $('<option>', { value: item.Value, text: item.Text});
                    if(item.Attributes != undefined){
                        
                        let attributes =Object.getOwnPropertyNames(item.Attributes);
                        for(let i=0; attributes.length > i ; i++){
                            let attribute = attributes[i];
                            let value = item.Attributes[attribute];
                            option.attr(attribute, value);
                        }
                    }
                    if(item.Disabled)
                        option.attr('disabled', true);
                    if(item.Hidden)
                        option.attr('hidden', true);
                    if(item.Tooltip != undefined && item.Tooltip.length)
                        option.attr('title', item.Tooltip)


                    if(item.Group != undefined && item.Group != null){
                        let group = item.Group;
                        let groupEl = element.find(`optgroup[label=${group.Name}]`);
                        if(groupEl.length){
                            groupEl.append(option);
                        }else{
                            groupEl = $('<optgroup>', {label: group.Name});
                            groupEl.append(option);
                            let attributes =Object.getOwnPropertyNames(group.Attributes);
                            for(let i=0; attributes.length > i ; i++){
                                let attribute = attributes[i];
                                let value = group.Attributes[attribute];
                                option.attr(attribute, value);
                            }
                            if(group.Disabled)
                                groupEl.attr('disabled', true);
                            if(group.Hidden)
                                groupEl.attr('hidden', true);
                            if(group.Tooltip != undefined && group.Tooltip.length)
                                groupEl.attr('title', group.tooltip)
                            element.append(groupEl);
                        }
                    } else{
                        element.append(option);
                    }

                });
            }

            uic.setValue(element, currentValue);

            element.triggerHandler('uic-loaded');
        });
        @if (Model.ReloadOnOpen)
        {
        <text>
        $('#@id').on('uic-open', ()=>{
            $('#@id').trigger('uic-reload');
        })
        </text>
        }
        @if (!Model.SkipInitialLoad)
        {
            <text>
            $('#@id').trigger('uic-reload');
            </text>
        }

    </text>
    }
}


