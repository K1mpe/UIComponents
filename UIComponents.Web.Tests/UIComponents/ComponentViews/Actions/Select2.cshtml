@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Interfaces.Services;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Abstractions.Models;
@using UIComponents.Models;

@using UIComponents.Models.Models;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Texts;
@using UIComponents.Web.Extensions;


@model UICActions
@{
    string identifier = Model.Id();
    if (string.IsNullOrEmpty(identifier))
        throw new Exception("Identifier for Actions not defined");

    Model.AssignCollectionForChildren();

    Model.AddScriptDocReady(
    @<text>
        @if (Model.OnClick.HasValue())
    {
        <text>
            console.log('OnClick', $('#@Html.Raw(identifier)'));
            $('#@Html.Raw(identifier)').click(async function (args) {
            @await Model.OnClick.InvokeAsync(Component)
            });
        </text>
    }

        @if (Model.OnChange.HasValue())
    {
        <text>
            console.log('OnChange', $('#@Html.Raw(identifier)'));
            $('#@Html.Raw(identifier)').change(async function (args) {
            @await Model.OnChange.InvokeAsync(Component)
            });
        </text>
    }

        @if (Model.AfterChange.HasValue())
    {
        <text>
            console.log('AfterChange', $('#@Html.Raw(identifier)'));
            $('#@Html.Raw(identifier)').on('select2:close', async function (args) {
                @await Model.AfterChange.InvokeAsync(Component)
            });
        </text>
    }

        @if (Model.OnFocus.HasValue())
    {
        <text>
            console.log('OnFocus', $('#@Html.Raw(identifier)'));
            $('#@Html.Raw(identifier)').focus(async function (args) {
            @await Model.OnFocus.InvokeAsync(Component)
            });
        </text>
    }

        @if (Model.OnLoseFocus.HasValue())
    {
        <text>
            console.log('OnLoseFocus', $('#@Html.Raw(identifier)'));
            $('#@Html.Raw(identifier)').blur(async function (args) {
            @await Model.OnLoseFocus.InvokeAsync(Component)
            });
        </text>
    }
    </text>);
}

@await Model.RenderStylesAndScripts(Component)