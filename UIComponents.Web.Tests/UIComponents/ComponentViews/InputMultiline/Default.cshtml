@using UIComponents.Abstractions;
@using UIComponents.Abstractions.Attributes;

@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Interfaces.Services;
@using UIComponents.Abstractions.Models;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Defaults;
@using UIComponents.Models;
@using UIComponents.Models.Models;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;
@using UIComponents.Models.Models.Card;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Texts;
@using UIComponents.Web.Extensions;

@inject IUICLanguageService L
@model UICInputMultiline

@{
    Model.AssignCollectionForChildren();
    Model.AddAttribute("class", "form-control");

    string id = Model.GetId();
    if (Model.Actions.HasValue())
    {
        Model.Actions.SetIdentifier($"#{id}");
    }

    var rows = Math.Clamp(Model.Value?.Split("\n").Count() ?? 1, Model.MinRows??1, Model.MaxRows??int.MaxValue);
    Model.AddAttribute("rows", rows.ToString());
    if (Model.MinRows != null)
        Model.AddAttribute("min-rows", Model.MinRows.ToString());

    if (Model.MaxRows != null)
        Model.AddAttribute("max-rows", Model.MaxRows.ToString());

    if (Model.ValidationRequired)
        Model.AddAttribute("required", string.Empty);
    if (Model.ValidationMinLength != null)
        Model.AddAttribute("minlength", Model.ValidationMinLength.ToString());
    if (Model.ValidationMaxLength != null)
        Model.AddAttribute("maxlength", Model.ValidationMaxLength.ToString());
    if (Model.HasClientSideValidation)
        Model.AddScript(false,@<text>uic.validation.init.validateText($('#@id'));</text>);

}

<textarea value="@Model.Value" @Html.Raw(Model.GetHtmlAttributes())>@Model.Value</textarea>

@await Model.Actions.InvokeAsync(Component)
@await Model.RenderStylesAndScripts(Component)