@using UIComponents.Abstractions.Attributes;
@using UIComponents.Abstractions.Enums
@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Interfaces.Services;
@using UIComponents.Abstractions.Models;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Defaults;
@using UIComponents.Generators.Configuration
@using UIComponents.Models;
@using UIComponents.Models.Models;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;
@using UIComponents.Models.Models.Card;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Tables;
@using UIComponents.Models.Models.Tables.TableColumns
@using UIComponents.Models.Models.Texts;
@using UIComponents.Web.Extensions;
@inject IUICLanguageService L
@inject UICConfig config
@model UICTableColumn
@{
    await config.GenerateTableColumn(Model);

    bool canView = true;
    if(Model.PropertyInfo != null && (Model.CheckViewPermission || (Model.CheckEditPermission && Model.Editing)))
    {
        if (config.TryGetPermissionService(out var permissionService))
        {
            if (Model.CheckViewPermission)
            {
                if (!await permissionService.CanViewPropertyOfType(Model.PropertyInfo.DeclaringType, Model.PropertyInfo.Name))
                {
                    canView = false;
                    return;
                }
            }
            if (Model.CheckEditPermission && Model.Editing)
            {
                Model.Editing = await permissionService.CanEditPropertyOfType(Model.PropertyInfo.DeclaringType, Model.PropertyInfo.Name);
            }
        }
    }
    

    if (!canView)
        return;

    Model.Css += UICTableColumn.VisibilityClass(Model.ColumnVisibility);
}
{
    name:@Html.JsEncode(Model.PropertyInfo?.Name,"'"),
    title: @await Html.TranslateJs(L, Model.Title, "'"),
    tooltip: @await Html.TranslateJs(L, Model.Tooltip, "'"),
    css: @Html.JsEncode(Model.Css, "'"),
    type: @Html.JsEncode(Model.Type, "'"),
    autosearch: @Json.Serialize(Model.AutoSearch),
    editing: @Json.Serialize(Model.Editing),
@if (!string.IsNullOrEmpty(Model.Width))
{
    <text>
        width: @Html.JsEncode(Model.Width, "'"),
    </text>
}
    @if(Model.HorizontalAlignment != null)
    {
        <text>
            align: @Html.JsEncode((Model.HorizontalAlignment ?? UICHorizontalAlignment.Left).ToString().ToLower(), "'"),
        </text>
    }
    nullable: @Json.Serialize(Model.Nullable),
    @if(!string.IsNullOrEmpty(Model.Step))
{
    <text>
    step: @Html.JsEncode(Model.Step, "'"),
    </text>
}
@if(Model.MinValue != null)
{
    <text>
        min: @Json.Serialize(Model.MinValue),
    </text>
}
@if(Model.MaxValue != null)
{
    <text>
        max: @Json.Serialize(Model.MaxValue),
    </text>
}
@if(!string.IsNullOrEmpty(Model.Format))
{
    <text>
    format: @Html.JsEncode(Model.Format, "'"),
    </text>
}
@if(Model.SelectListItems != null && Model.SelectListItems.Any())
{
    <text>
        items: [
        @foreach(var item in Model.SelectListItems)
        {
        <text>
            {Value: @Html.JsEncode(item.Value, "'"), Text: @Html.JsEncode(item.Text, "'")},
        </text>
        }
        ],
    </text>    
}
@if (Model.CellRenderer.HasValue())
{
    <text>
        cellRenderer: function(value, item){
            @await Model.CellRenderer.InvokeAsync(Component)
        },
    </text>
}
@if (Model.ItemTemplate.HasValue())
{
    <text>
        itemTemplate: function(value, item){
            @await Model.ItemTemplate.InvokeAsync(Component)
        },
    </text>
}
@if (Model.EditTemplate.HasValue())
{
    <text>
        editTemplate: function(value, item){
            @await Model.EditTemplate.InvokeAsync(Component)
        },
    </text>
}
@if (Model.FilterTemplate.HasValue())
{
    <text>
        filterTemplate: function(){
            @await Model.FilterTemplate.InvokeAsync(Component)
        },
    </text>
}
@if (Model.HeaderTemplate.HasValue())
{
    <text>
        headerTemplate: function(){
            return `@await Model.HeaderTemplate.InvokeAsync(Component)`
        },
    </text>
}
else if(Model.HeaderTemplate != null)
{
    <text>
        headerTemplate: uic.jsgrid.defaultHeaderTemplate(
            @await Html.TranslateJs(L, Model.Title, "`"),
            @Html.JsEncode(UICTableColumn.VisibilityClass(Model.TextVisibility), "'"),
            @if(Model.Icon.HasValue())
            {
                <text>$(`@await Model.Icon.InvokeAsync(Component)`),</text>
            } else
            {
                <text>null,</text>
            }
            @Html.JsEncode(UICTableColumn.VisibilityClass(Model.IconVisibility), "'"),
            @await Html.TranslateJs(L, Model.Tooltip, "'")
        ),
    </text>
 }
    @await Model.Options.ConvertToJavascript(L, Html, Json, Component)
},