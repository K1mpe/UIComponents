@using UIComponents.Abstractions;
@using UIComponents.Abstractions.Attributes;
@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Interfaces.Services;
@using UIComponents.Abstractions.Models;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Defaults;
@using UIComponents.Models;
@using UIComponents.Models.Models;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;
@using UIComponents.Models.Models.Card;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Texts;
@using UIComponents.Web.Extensions;

@inject IUICLanguageService L
@model UICInputNumber

@{
    Model.AssignCollectionForChildren();
    Model.AddAttribute("class", "form-control");


    string id = Model.GetId();
    Model.Actions.SetIdentifier($"#{id}");

    if (Model.ValidationRequired)
        Model.AddAttribute("required", string.Empty);
    if (Model.ValidationMinValue.HasValue)
        Model.AddAttribute("min", Model.ValidationMinValue.Value.ToString());

    if (Model.ValidationMaxValue.HasValue)
        Model.AddAttribute("max", Model.ValidationMaxValue.Value.ToString());

    if (Model.AllowDecimalValues)
        Model.AddAttribute("step", "any");

    if (Model.HasClientSideValidation)
        Model.AddScript(false,@<text>uic.validation.init.validateNumber($('#@id'));</text>);
}

<input type="number" value="@Model.Value.ToString().Replace(",", ".")" @Html.Raw(Model.GetHtmlAttributes()) />


@if (!Model.AllowDecimalValues)
{
    Model.AddScript(false,@<text>
        $('#@id').change(function(){
            uic.form.removeDecimals($(this));
        });
    </text>);
}
@await Model.Actions.InvokeAsync(Component)
@await Model.RenderStylesAndScripts(Component)