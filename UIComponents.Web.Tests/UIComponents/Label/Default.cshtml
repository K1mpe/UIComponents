@using UIComponents.Defaults;
@using UIComponents.Abstractions.Attributes;
@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Interfaces.ExternalServices;
@using UIComponents.Abstractions.Models;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Models;
@using UIComponents.Models.Models;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Texts;
@using UIComponents.Web.Extensions;

@inject IUicLanguageService L
@model UICLabel
@{
    string labelText = await L.Translate(Model.LabelText);


}
<label @Html.Raw(Model.GetHtmlAttributes())>
    @Html.JsEncode(labelText)
    @if (Model.Required)
    {
        <span class="text-danger" title="@await Html.Translate(L, TranslationDefaults.ValidationIsRequired(labelText), null)">*</span>
    }
    @if(!string.IsNullOrWhiteSpace(Model.GetAttribute("title")))
    {
        @await Model.TooltipIcon.InvokeAsync(Component)
    }
        
</label>
