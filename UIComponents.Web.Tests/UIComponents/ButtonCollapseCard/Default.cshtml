@using UIComponents.Abstractions.Attributes;
@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Interfaces.ExternalServices;
@using UIComponents.Abstractions.Models;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Defaults;
@using UIComponents.Models;
@using UIComponents.Models.Models;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;
@using UIComponents.Models.Models.Card;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Texts;
@using UIComponents.Web.Extensions;

@model UICButtonCollapseCard

@{
    string id = Model.GetOrGenerateId();
    string idButtonTrue = Model.ButtonTrue.GetOrGenerateId();
    string idButtonFalse = Model.ButtonFalse.GetOrGenerateId();

    



    Model.AssignCollectionForChildren();

    Model.AddScript(
    @<text>

        //Expand
        let ViewButtonTrue = function(){
            $('#@idButtonTrue').attr('hidden', false);
            $('#@idButtonFalse').attr('hidden',true);
        };
        //Collapse
        let ViewButtonFalse = function () {
            $('#@idButtonTrue').attr('hidden', true);
            $('#@idButtonFalse').attr('hidden', false);
        };
        
        let card;
        @if(Model.Card != null)
        {
            <text>
            card = $('#@Model.Card.GetOrGenerateId()');
            </text>
        }
        else
        {
           <text>
           card = $('#@id').closest('.uic.card');
           </text>
        }
        if(!card.length)
            $('#@id').attr('hidden', 'hidden');

        card.on('uic-opened', ()=> {ViewButtonFalse()});
        card.on('uic-closed', ()=> {ViewButtonTrue()});

        $('#@id').click(() => card.triggerHandler('uic-toggle'));

        if(card.hasClass('collapsed-card'))
            ViewButtonTrue();
        else 
            ViewButtonFalse();

    </text>);

}


<span @Html.Raw(Model.GetHtmlAttributes())>
    @await Model.ButtonTrue.InvokeAsync(Component)
    @await Model.ButtonFalse.InvokeAsync(Component)
</span>

<script>
    $(document).ready(function () {

    });
</script>
@await Model.RenderStylesAndScripts(Component)