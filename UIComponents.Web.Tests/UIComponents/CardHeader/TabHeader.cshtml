@using UIComponents.Abstractions.Attributes;
@using UIComponents.Abstractions.Interfaces;
@using UIComponents.Abstractions.Interfaces.ExternalServices;
@using UIComponents.Abstractions.Models;
@using UIComponents.Abstractions.Extensions;
@using UIComponents.Defaults;
@using UIComponents.Models;
@using UIComponents.Models.Models;
@using UIComponents.Models.Models.Actions;
@using UIComponents.Models.Models.Buttons;
@using UIComponents.Models.Models.Card;
@using UIComponents.Models.Models.Dropdown;
@using UIComponents.Models.Models.Icons;
@using UIComponents.Models.Models.Inputs;
@using UIComponents.Models.Models.Texts;
@using UIComponents.Web.Extensions;

@inject IUicLanguageService L

@model UICCardHeader
@{
    string id = Model.GetOrGenerateId();
    Model.AssignCollectionForChildren();

}


<a @Html.Raw(Model.GetHtmlAttributes())>
        @await Model.PrependTitle.InvokeAsync(Component)
        <span class="tab-title">
            @await Html.Translate(L, Model.Title, null)
        </span>
        
        @await Model.AppendTitle.InvokeAsync(Component)
    @if (Model.Buttons.AnyHasValue())
    {
        <div class="tab-tools">
            @foreach (var button in Model.Buttons)
            {
                if (button is UICButton b2)
                    b2.Renderer = UICButton.ButtonRenderer.CardButton;
                if(button is UICToggleButton toggleButton)
                {
                    toggleButton.ButtonTrue.Renderer = UICButton.ButtonRenderer.CardButton;   
                    toggleButton.ButtonFalse.Renderer = UICButton.ButtonRenderer.CardButton;   
                }
                @await button.InvokeAsync(Component)
            }
        </div>
    }
</a>

@await Model.RenderStylesAndScripts(Component)